"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  toInt: true,
  toStr: true,
  nodes: true,
  getEnum: true
};
exports.getEnum = exports.nodes = exports.toStr = exports.toInt = void 0;

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _types[key];
    }
  });
});
var toInt = {
  OnCommitAction: {
    ONCOMMIT_NOOP: 0,
    ONCOMMIT_PRESERVE_ROWS: 1,
    ONCOMMIT_DELETE_ROWS: 2,
    ONCOMMIT_DROP: 3
  },
  ParamKind: {
    PARAM_EXTERN: 0,
    PARAM_EXEC: 1,
    PARAM_SUBLINK: 2,
    PARAM_MULTIEXPR: 3
  },
  CoercionContext: {
    COERCION_IMPLICIT: 0,
    COERCION_ASSIGNMENT: 1,
    COERCION_EXPLICIT: 2
  },
  CoercionForm: {
    COERCE_EXPLICIT_CALL: 0,
    COERCE_EXPLICIT_CAST: 1,
    COERCE_IMPLICIT_CAST: 2
  },
  BoolExprType: {
    AND_EXPR: 0,
    OR_EXPR: 1,
    NOT_EXPR: 2
  },
  SubLinkType: {
    EXISTS_SUBLINK: 0,
    ALL_SUBLINK: 1,
    ANY_SUBLINK: 2,
    ROWCOMPARE_SUBLINK: 3,
    EXPR_SUBLINK: 4,
    MULTIEXPR_SUBLINK: 5,
    ARRAY_SUBLINK: 6,
    CTE_SUBLINK: 7
  },
  RowCompareType: {
    ROWCOMPARE_LT: 1,
    ROWCOMPARE_LE: 2,
    ROWCOMPARE_EQ: 3,
    ROWCOMPARE_GE: 4,
    ROWCOMPARE_GT: 5,
    ROWCOMPARE_NE: 6
  },
  MinMaxOp: {
    IS_GREATEST: 0,
    IS_LEAST: 1
  },
  SQLValueFunctionOp: {
    SVFOP_CURRENT_DATE: 0,
    SVFOP_CURRENT_TIME: 1,
    SVFOP_CURRENT_TIME_N: 2,
    SVFOP_CURRENT_TIMESTAMP: 3,
    SVFOP_CURRENT_TIMESTAMP_N: 4,
    SVFOP_LOCALTIME: 5,
    SVFOP_LOCALTIME_N: 6,
    SVFOP_LOCALTIMESTAMP: 7,
    SVFOP_LOCALTIMESTAMP_N: 8,
    SVFOP_CURRENT_ROLE: 9,
    SVFOP_CURRENT_USER: 10,
    SVFOP_USER: 11,
    SVFOP_SESSION_USER: 12,
    SVFOP_CURRENT_CATALOG: 13,
    SVFOP_CURRENT_SCHEMA: 14
  },
  XmlExprOp: {
    IS_XMLCONCAT: 0,
    IS_XMLELEMENT: 1,
    IS_XMLFOREST: 2,
    IS_XMLPARSE: 3,
    IS_XMLPI: 4,
    IS_XMLROOT: 5,
    IS_XMLSERIALIZE: 6,
    IS_DOCUMENT: 7
  },
  XmlOptionType: {
    XMLOPTION_DOCUMENT: 0,
    XMLOPTION_CONTENT: 1
  },
  NullTestType: {
    IS_NULL: 0,
    IS_NOT_NULL: 1
  },
  BoolTestType: {
    IS_TRUE: 0,
    IS_NOT_TRUE: 1,
    IS_FALSE: 2,
    IS_NOT_FALSE: 3,
    IS_UNKNOWN: 4,
    IS_NOT_UNKNOWN: 5
  },
  OverridingKind: {
    OVERRIDING_NOT_SET: 0,
    OVERRIDING_USER_VALUE: 1,
    OVERRIDING_SYSTEM_VALUE: 2
  },
  QuerySource: {
    QSRC_ORIGINAL: 0,
    QSRC_PARSER: 1,
    QSRC_INSTEAD_RULE: 2,
    QSRC_QUAL_INSTEAD_RULE: 3,
    QSRC_NON_INSTEAD_RULE: 4
  },
  SortByDir: {
    SORTBY_DEFAULT: 0,
    SORTBY_ASC: 1,
    SORTBY_DESC: 2,
    SORTBY_USING: 3
  },
  SortByNulls: {
    SORTBY_NULLS_DEFAULT: 0,
    SORTBY_NULLS_FIRST: 1,
    SORTBY_NULLS_LAST: 2
  },
  A_Expr_Kind: {
    AEXPR_OP: 0,
    AEXPR_OP_ANY: 1,
    AEXPR_OP_ALL: 2,
    AEXPR_DISTINCT: 3,
    AEXPR_NOT_DISTINCT: 4,
    AEXPR_NULLIF: 5,
    AEXPR_OF: 6,
    AEXPR_IN: 7,
    AEXPR_LIKE: 8,
    AEXPR_ILIKE: 9,
    AEXPR_SIMILAR: 10,
    AEXPR_BETWEEN: 11,
    AEXPR_NOT_BETWEEN: 12,
    AEXPR_BETWEEN_SYM: 13,
    AEXPR_NOT_BETWEEN_SYM: 14,
    AEXPR_PAREN: 15
  },
  RoleSpecType: {
    ROLESPEC_CSTRING: 0,
    ROLESPEC_CURRENT_USER: 1,
    ROLESPEC_SESSION_USER: 2,
    ROLESPEC_PUBLIC: 3
  },
  TableLikeOption: {
    CREATE_TABLE_LIKE_COMMENTS: 1,
    CREATE_TABLE_LIKE_CONSTRAINTS: 2,
    CREATE_TABLE_LIKE_DEFAULTS: 4,
    CREATE_TABLE_LIKE_GENERATED: 8,
    CREATE_TABLE_LIKE_IDENTITY: 16,
    CREATE_TABLE_LIKE_INDEXES: 32,
    CREATE_TABLE_LIKE_STATISTICS: 64,
    CREATE_TABLE_LIKE_STORAGE: 128,
    CREATE_TABLE_LIKE_ALL: 2147483647
  },
  DefElemAction: {
    DEFELEM_UNSPEC: 0,
    DEFELEM_SET: 1,
    DEFELEM_ADD: 2,
    DEFELEM_DROP: 3
  },
  PartitionRangeDatumKind: {
    PARTITION_RANGE_DATUM_MINVALUE: 0,
    PARTITION_RANGE_DATUM_VALUE: 0,
    PARTITION_RANGE_DATUM_MAXVALUE: 1
  },
  RTEKind: {
    RTE_RELATION: 0,
    RTE_SUBQUERY: 1,
    RTE_JOIN: 2,
    RTE_FUNCTION: 3,
    RTE_TABLEFUNC: 4,
    RTE_VALUES: 5,
    RTE_CTE: 6,
    RTE_NAMEDTUPLESTORE: 7,
    RTE_RESULT: 8
  },
  WCOKind: {
    WCO_VIEW_CHECK: 0,
    WCO_RLS_INSERT_CHECK: 1,
    WCO_RLS_UPDATE_CHECK: 2,
    WCO_RLS_CONFLICT_CHECK: 3
  },
  GroupingSetKind: {
    GROUPING_SET_EMPTY: 0,
    GROUPING_SET_SIMPLE: 1,
    GROUPING_SET_ROLLUP: 2,
    GROUPING_SET_CUBE: 3,
    GROUPING_SET_SETS: 4
  },
  CTEMaterialize: {
    CTEMaterializeDefault: 0,
    CTEMaterializeAlways: 1,
    CTEMaterializeNever: 2
  },
  SetOperation: {
    SETOP_NONE: 0,
    SETOP_UNION: 1,
    SETOP_INTERSECT: 2,
    SETOP_EXCEPT: 3
  },
  ObjectType: {
    OBJECT_ACCESS_METHOD: 0,
    OBJECT_AGGREGATE: 1,
    OBJECT_AMOP: 2,
    OBJECT_AMPROC: 3,
    OBJECT_ATTRIBUTE: 4,
    OBJECT_CAST: 5,
    OBJECT_COLUMN: 6,
    OBJECT_COLLATION: 7,
    OBJECT_CONVERSION: 8,
    OBJECT_DATABASE: 9,
    OBJECT_DEFAULT: 10,
    OBJECT_DEFACL: 11,
    OBJECT_DOMAIN: 12,
    OBJECT_DOMCONSTRAINT: 13,
    OBJECT_EVENT_TRIGGER: 14,
    OBJECT_EXTENSION: 15,
    OBJECT_FDW: 16,
    OBJECT_FOREIGN_SERVER: 17,
    OBJECT_FOREIGN_TABLE: 18,
    OBJECT_FUNCTION: 19,
    OBJECT_INDEX: 20,
    OBJECT_LANGUAGE: 21,
    OBJECT_LARGEOBJECT: 22,
    OBJECT_MATVIEW: 23,
    OBJECT_OPCLASS: 24,
    OBJECT_OPERATOR: 25,
    OBJECT_OPFAMILY: 26,
    OBJECT_POLICY: 27,
    OBJECT_PROCEDURE: 28,
    OBJECT_PUBLICATION: 29,
    OBJECT_PUBLICATION_REL: 30,
    OBJECT_ROLE: 31,
    OBJECT_ROUTINE: 32,
    OBJECT_RULE: 33,
    OBJECT_SCHEMA: 34,
    OBJECT_SEQUENCE: 35,
    OBJECT_SUBSCRIPTION: 36,
    OBJECT_STATISTIC_EXT: 37,
    OBJECT_TABCONSTRAINT: 38,
    OBJECT_TABLE: 39,
    OBJECT_TABLESPACE: 40,
    OBJECT_TRANSFORM: 41,
    OBJECT_TRIGGER: 42,
    OBJECT_TSCONFIGURATION: 43,
    OBJECT_TSDICTIONARY: 44,
    OBJECT_TSPARSER: 45,
    OBJECT_TSTEMPLATE: 46,
    OBJECT_TYPE: 47,
    OBJECT_USER_MAPPING: 48,
    OBJECT_VIEW: 49
  },
  DropBehavior: {
    DROP_RESTRICT: 0,
    DROP_CASCADE: 1
  },
  AlterTableType: {
    AT_AddColumn: 0,
    AT_AddColumnRecurse: 1,
    AT_AddColumnToView: 2,
    AT_ColumnDefault: 3,
    AT_CookedColumnDefault: 4,
    AT_DropNotNull: 5,
    AT_SetNotNull: 6,
    AT_DropExpression: 7,
    AT_CheckNotNull: 8,
    AT_SetStatistics: 9,
    AT_SetOptions: 10,
    AT_ResetOptions: 11,
    AT_SetStorage: 12,
    AT_DropColumn: 13,
    AT_DropColumnRecurse: 14,
    AT_AddIndex: 15,
    AT_ReAddIndex: 16,
    AT_AddConstraint: 17,
    AT_AddConstraintRecurse: 18,
    AT_ReAddConstraint: 19,
    AT_ReAddDomainConstraint: 20,
    AT_AlterConstraint: 21,
    AT_ValidateConstraint: 22,
    AT_ValidateConstraintRecurse: 23,
    AT_AddIndexConstraint: 24,
    AT_DropConstraint: 25,
    AT_DropConstraintRecurse: 26,
    AT_ReAddComment: 27,
    AT_AlterColumnType: 28,
    AT_AlterColumnGenericOptions: 29,
    AT_ChangeOwner: 30,
    AT_ClusterOn: 31,
    AT_DropCluster: 32,
    AT_SetLogged: 33,
    AT_SetUnLogged: 34,
    AT_DropOids: 35,
    AT_SetTableSpace: 36,
    AT_SetRelOptions: 37,
    AT_ResetRelOptions: 38,
    AT_ReplaceRelOptions: 39,
    AT_EnableTrig: 40,
    AT_EnableAlwaysTrig: 41,
    AT_EnableReplicaTrig: 42,
    AT_DisableTrig: 43,
    AT_EnableTrigAll: 44,
    AT_DisableTrigAll: 45,
    AT_EnableTrigUser: 46,
    AT_DisableTrigUser: 47,
    AT_EnableRule: 48,
    AT_EnableAlwaysRule: 49,
    AT_EnableReplicaRule: 50,
    AT_DisableRule: 51,
    AT_AddInherit: 52,
    AT_DropInherit: 53,
    AT_AddOf: 54,
    AT_DropOf: 55,
    AT_ReplicaIdentity: 56,
    AT_EnableRowSecurity: 57,
    AT_DisableRowSecurity: 58,
    AT_ForceRowSecurity: 59,
    AT_NoForceRowSecurity: 60,
    AT_GenericOptions: 61,
    AT_AttachPartition: 62,
    AT_DetachPartition: 63,
    AT_AddIdentity: 64,
    AT_SetIdentity: 65,
    AT_DropIdentity: 66
  },
  GrantTargetType: {
    ACL_TARGET_OBJECT: 0,
    ACL_TARGET_ALL_IN_SCHEMA: 1,
    ACL_TARGET_DEFAULTS: 2
  },
  VariableSetKind: {
    VAR_SET_VALUE: 0,
    VAR_SET_DEFAULT: 1,
    VAR_SET_CURRENT: 2,
    VAR_SET_MULTI: 3,
    VAR_RESET: 4,
    VAR_RESET_ALL: 5
  },
  ConstrType: {
    CONSTR_NULL: 0,
    CONSTR_NOTNULL: 1,
    CONSTR_DEFAULT: 2,
    CONSTR_IDENTITY: 3,
    CONSTR_GENERATED: 4,
    CONSTR_CHECK: 5,
    CONSTR_PRIMARY: 6,
    CONSTR_UNIQUE: 7,
    CONSTR_EXCLUSION: 8,
    CONSTR_FOREIGN: 9,
    CONSTR_ATTR_DEFERRABLE: 10,
    CONSTR_ATTR_NOT_DEFERRABLE: 11,
    CONSTR_ATTR_DEFERRED: 12,
    CONSTR_ATTR_IMMEDIATE: 13
  },
  ImportForeignSchemaType: {
    FDW_IMPORT_SCHEMA_ALL: 0,
    FDW_IMPORT_SCHEMA_LIMIT_TO: 1,
    FDW_IMPORT_SCHEMA_EXCEPT: 2
  },
  RoleStmtType: {
    ROLESTMT_ROLE: 0,
    ROLESTMT_USER: 1,
    ROLESTMT_GROUP: 2
  },
  FetchDirection: {
    FETCH_FORWARD: 0,
    FETCH_BACKWARD: 1,
    FETCH_ABSOLUTE: 2,
    FETCH_RELATIVE: 3
  },
  FunctionParameterMode: {
    FUNC_PARAM_IN: 105,
    FUNC_PARAM_OUT: 111,
    FUNC_PARAM_INOUT: 98,
    FUNC_PARAM_VARIADIC: 118,
    FUNC_PARAM_TABLE: 116
  },
  TransactionStmtKind: {
    TRANS_STMT_BEGIN: 0,
    TRANS_STMT_START: 1,
    TRANS_STMT_COMMIT: 2,
    TRANS_STMT_ROLLBACK: 3,
    TRANS_STMT_SAVEPOINT: 4,
    TRANS_STMT_RELEASE: 5,
    TRANS_STMT_ROLLBACK_TO: 6,
    TRANS_STMT_PREPARE: 7,
    TRANS_STMT_COMMIT_PREPARED: 8,
    TRANS_STMT_ROLLBACK_PREPARED: 9
  },
  ViewCheckOption: {
    NO_CHECK_OPTION: 0,
    LOCAL_CHECK_OPTION: 1,
    CASCADED_CHECK_OPTION: 2
  },
  ClusterOption: {
    CLUOPT_RECHECK: 1,
    CLUOPT_VERBOSE: 2
  },
  DiscardMode: {
    DISCARD_ALL: 0,
    DISCARD_PLANS: 1,
    DISCARD_SEQUENCES: 2,
    DISCARD_TEMP: 3
  },
  ReindexObjectType: {
    REINDEX_OBJECT_INDEX: 0,
    REINDEX_OBJECT_TABLE: 1,
    REINDEX_OBJECT_SCHEMA: 2,
    REINDEX_OBJECT_SYSTEM: 3,
    REINDEX_OBJECT_DATABASE: 4
  },
  AlterTSConfigType: {
    ALTER_TSCONFIG_ADD_MAPPING: 0,
    ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN: 1,
    ALTER_TSCONFIG_REPLACE_DICT: 2,
    ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN: 3,
    ALTER_TSCONFIG_DROP_MAPPING: 4
  },
  AlterSubscriptionType: {
    ALTER_SUBSCRIPTION_OPTIONS: 0,
    ALTER_SUBSCRIPTION_CONNECTION: 1,
    ALTER_SUBSCRIPTION_PUBLICATION: 2,
    ALTER_SUBSCRIPTION_REFRESH: 3,
    ALTER_SUBSCRIPTION_ENABLED: 4
  },
  LockClauseStrength: {
    LCS_NONE: 0,
    LCS_FORKEYSHARE: 1,
    LCS_FORSHARE: 2,
    LCS_FORNOKEYUPDATE: 3,
    LCS_FORUPDATE: 4
  },
  LockWaitPolicy: {
    LockWaitBlock: 0,
    LockWaitSkip: 1,
    LockWaitError: 2
  },
  LockTupleMode: {
    LockTupleKeyShare: 0,
    LockTupleShare: 1,
    LockTupleNoKeyExclusive: 2,
    LockTupleExclusive: 3
  },
  NodeTag: {
    T_Invalid: 0,
    T_IndexInfo: 1,
    T_ExprContext: 2,
    T_ProjectionInfo: 3,
    T_JunkFilter: 4,
    T_OnConflictSetState: 5,
    T_ResultRelInfo: 6,
    T_EState: 7,
    T_TupleTableSlot: 8,
    T_Plan: 9,
    T_Result: 10,
    T_ProjectSet: 11,
    T_ModifyTable: 12,
    T_Append: 13,
    T_MergeAppend: 14,
    T_RecursiveUnion: 15,
    T_BitmapAnd: 16,
    T_BitmapOr: 17,
    T_Scan: 18,
    T_SeqScan: 19,
    T_SampleScan: 20,
    T_IndexScan: 21,
    T_IndexOnlyScan: 22,
    T_BitmapIndexScan: 23,
    T_BitmapHeapScan: 24,
    T_TidScan: 25,
    T_SubqueryScan: 26,
    T_FunctionScan: 27,
    T_ValuesScan: 28,
    T_TableFuncScan: 29,
    T_CteScan: 30,
    T_NamedTuplestoreScan: 31,
    T_WorkTableScan: 32,
    T_ForeignScan: 33,
    T_CustomScan: 34,
    T_Join: 35,
    T_NestLoop: 36,
    T_MergeJoin: 37,
    T_HashJoin: 38,
    T_Material: 39,
    T_Sort: 40,
    T_IncrementalSort: 41,
    T_Group: 42,
    T_Agg: 43,
    T_WindowAgg: 44,
    T_Unique: 45,
    T_Gather: 46,
    T_GatherMerge: 47,
    T_Hash: 48,
    T_SetOp: 49,
    T_LockRows: 50,
    T_Limit: 51,
    T_NestLoopParam: 52,
    T_PlanRowMark: 53,
    T_PartitionPruneInfo: 54,
    T_PartitionedRelPruneInfo: 55,
    T_PartitionPruneStepOp: 56,
    T_PartitionPruneStepCombine: 57,
    T_PlanInvalItem: 58,
    T_PlanState: 59,
    T_ResultState: 60,
    T_ProjectSetState: 61,
    T_ModifyTableState: 62,
    T_AppendState: 63,
    T_MergeAppendState: 64,
    T_RecursiveUnionState: 65,
    T_BitmapAndState: 66,
    T_BitmapOrState: 67,
    T_ScanState: 68,
    T_SeqScanState: 69,
    T_SampleScanState: 70,
    T_IndexScanState: 71,
    T_IndexOnlyScanState: 72,
    T_BitmapIndexScanState: 73,
    T_BitmapHeapScanState: 74,
    T_TidScanState: 75,
    T_SubqueryScanState: 76,
    T_FunctionScanState: 77,
    T_TableFuncScanState: 78,
    T_ValuesScanState: 79,
    T_CteScanState: 80,
    T_NamedTuplestoreScanState: 81,
    T_WorkTableScanState: 82,
    T_ForeignScanState: 83,
    T_CustomScanState: 84,
    T_JoinState: 85,
    T_NestLoopState: 86,
    T_MergeJoinState: 87,
    T_HashJoinState: 88,
    T_MaterialState: 89,
    T_SortState: 90,
    T_IncrementalSortState: 91,
    T_GroupState: 92,
    T_AggState: 93,
    T_WindowAggState: 94,
    T_UniqueState: 95,
    T_GatherState: 96,
    T_GatherMergeState: 97,
    T_HashState: 98,
    T_SetOpState: 99,
    T_LockRowsState: 100,
    T_LimitState: 101,
    T_Alias: 102,
    T_RangeVar: 103,
    T_TableFunc: 104,
    T_Expr: 105,
    T_Var: 106,
    T_Const: 107,
    T_Param: 108,
    T_Aggref: 109,
    T_GroupingFunc: 110,
    T_WindowFunc: 111,
    T_SubscriptingRef: 112,
    T_FuncExpr: 113,
    T_NamedArgExpr: 114,
    T_OpExpr: 115,
    T_DistinctExpr: 116,
    T_NullIfExpr: 117,
    T_ScalarArrayOpExpr: 118,
    T_BoolExpr: 119,
    T_SubLink: 120,
    T_SubPlan: 121,
    T_AlternativeSubPlan: 122,
    T_FieldSelect: 123,
    T_FieldStore: 124,
    T_RelabelType: 125,
    T_CoerceViaIO: 126,
    T_ArrayCoerceExpr: 127,
    T_ConvertRowtypeExpr: 128,
    T_CollateExpr: 129,
    T_CaseExpr: 130,
    T_CaseWhen: 131,
    T_CaseTestExpr: 132,
    T_ArrayExpr: 133,
    T_RowExpr: 134,
    T_RowCompareExpr: 135,
    T_CoalesceExpr: 136,
    T_MinMaxExpr: 137,
    T_SQLValueFunction: 138,
    T_XmlExpr: 139,
    T_NullTest: 140,
    T_BooleanTest: 141,
    T_CoerceToDomain: 142,
    T_CoerceToDomainValue: 143,
    T_SetToDefault: 144,
    T_CurrentOfExpr: 145,
    T_NextValueExpr: 146,
    T_InferenceElem: 147,
    T_TargetEntry: 148,
    T_RangeTblRef: 149,
    T_JoinExpr: 150,
    T_FromExpr: 151,
    T_OnConflictExpr: 152,
    T_IntoClause: 153,
    T_ExprState: 154,
    T_AggrefExprState: 155,
    T_WindowFuncExprState: 156,
    T_SetExprState: 157,
    T_SubPlanState: 158,
    T_AlternativeSubPlanState: 159,
    T_DomainConstraintState: 160,
    T_PlannerInfo: 161,
    T_PlannerGlobal: 162,
    T_RelOptInfo: 163,
    T_IndexOptInfo: 164,
    T_ForeignKeyOptInfo: 165,
    T_ParamPathInfo: 166,
    T_Path: 167,
    T_IndexPath: 168,
    T_BitmapHeapPath: 169,
    T_BitmapAndPath: 170,
    T_BitmapOrPath: 171,
    T_TidPath: 172,
    T_SubqueryScanPath: 173,
    T_ForeignPath: 174,
    T_CustomPath: 175,
    T_NestPath: 176,
    T_MergePath: 177,
    T_HashPath: 178,
    T_AppendPath: 179,
    T_MergeAppendPath: 180,
    T_GroupResultPath: 181,
    T_MaterialPath: 182,
    T_UniquePath: 183,
    T_GatherPath: 184,
    T_GatherMergePath: 185,
    T_ProjectionPath: 186,
    T_ProjectSetPath: 187,
    T_SortPath: 188,
    T_IncrementalSortPath: 189,
    T_GroupPath: 190,
    T_UpperUniquePath: 191,
    T_AggPath: 192,
    T_GroupingSetsPath: 193,
    T_MinMaxAggPath: 194,
    T_WindowAggPath: 195,
    T_SetOpPath: 196,
    T_RecursiveUnionPath: 197,
    T_LockRowsPath: 198,
    T_ModifyTablePath: 199,
    T_LimitPath: 200,
    T_EquivalenceClass: 201,
    T_EquivalenceMember: 202,
    T_PathKey: 203,
    T_PathTarget: 204,
    T_RestrictInfo: 205,
    T_IndexClause: 206,
    T_PlaceHolderVar: 207,
    T_SpecialJoinInfo: 208,
    T_AppendRelInfo: 209,
    T_PlaceHolderInfo: 210,
    T_MinMaxAggInfo: 211,
    T_PlannerParamItem: 212,
    T_RollupData: 213,
    T_GroupingSetData: 214,
    T_StatisticExtInfo: 215,
    T_MemoryContext: 216,
    T_AllocSetContext: 217,
    T_SlabContext: 218,
    T_GenerationContext: 219,
    T_Value: 220,
    T_Integer: 221,
    T_Float: 222,
    T_String: 223,
    T_BitString: 224,
    T_Null: 225,
    T_List: 226,
    T_IntList: 227,
    T_OidList: 228,
    T_ExtensibleNode: 229,
    T_RawStmt: 230,
    T_Query: 231,
    T_PlannedStmt: 232,
    T_InsertStmt: 233,
    T_DeleteStmt: 234,
    T_UpdateStmt: 235,
    T_SelectStmt: 236,
    T_AlterTableStmt: 237,
    T_AlterTableCmd: 238,
    T_AlterDomainStmt: 239,
    T_SetOperationStmt: 240,
    T_GrantStmt: 241,
    T_GrantRoleStmt: 242,
    T_AlterDefaultPrivilegesStmt: 243,
    T_ClosePortalStmt: 244,
    T_ClusterStmt: 245,
    T_CopyStmt: 246,
    T_CreateStmt: 247,
    T_DefineStmt: 248,
    T_DropStmt: 249,
    T_TruncateStmt: 250,
    T_CommentStmt: 251,
    T_FetchStmt: 252,
    T_IndexStmt: 253,
    T_CreateFunctionStmt: 254,
    T_AlterFunctionStmt: 255,
    T_DoStmt: 256,
    T_RenameStmt: 257,
    T_RuleStmt: 258,
    T_NotifyStmt: 259,
    T_ListenStmt: 260,
    T_UnlistenStmt: 261,
    T_TransactionStmt: 262,
    T_ViewStmt: 263,
    T_LoadStmt: 264,
    T_CreateDomainStmt: 265,
    T_CreatedbStmt: 266,
    T_DropdbStmt: 267,
    T_VacuumStmt: 268,
    T_ExplainStmt: 269,
    T_CreateTableAsStmt: 270,
    T_CreateSeqStmt: 271,
    T_AlterSeqStmt: 272,
    T_VariableSetStmt: 273,
    T_VariableShowStmt: 274,
    T_DiscardStmt: 275,
    T_CreateTrigStmt: 276,
    T_CreatePLangStmt: 277,
    T_CreateRoleStmt: 278,
    T_AlterRoleStmt: 279,
    T_DropRoleStmt: 280,
    T_LockStmt: 281,
    T_ConstraintsSetStmt: 282,
    T_ReindexStmt: 283,
    T_CheckPointStmt: 284,
    T_CreateSchemaStmt: 285,
    T_AlterDatabaseStmt: 286,
    T_AlterDatabaseSetStmt: 287,
    T_AlterRoleSetStmt: 288,
    T_CreateConversionStmt: 289,
    T_CreateCastStmt: 290,
    T_CreateOpClassStmt: 291,
    T_CreateOpFamilyStmt: 292,
    T_AlterOpFamilyStmt: 293,
    T_PrepareStmt: 294,
    T_ExecuteStmt: 295,
    T_DeallocateStmt: 296,
    T_DeclareCursorStmt: 297,
    T_CreateTableSpaceStmt: 298,
    T_DropTableSpaceStmt: 299,
    T_AlterObjectDependsStmt: 300,
    T_AlterObjectSchemaStmt: 301,
    T_AlterOwnerStmt: 302,
    T_AlterOperatorStmt: 303,
    T_AlterTypeStmt: 304,
    T_DropOwnedStmt: 305,
    T_ReassignOwnedStmt: 306,
    T_CompositeTypeStmt: 307,
    T_CreateEnumStmt: 308,
    T_CreateRangeStmt: 309,
    T_AlterEnumStmt: 310,
    T_AlterTSDictionaryStmt: 311,
    T_AlterTSConfigurationStmt: 312,
    T_CreateFdwStmt: 313,
    T_AlterFdwStmt: 314,
    T_CreateForeignServerStmt: 315,
    T_AlterForeignServerStmt: 316,
    T_CreateUserMappingStmt: 317,
    T_AlterUserMappingStmt: 318,
    T_DropUserMappingStmt: 319,
    T_AlterTableSpaceOptionsStmt: 320,
    T_AlterTableMoveAllStmt: 321,
    T_SecLabelStmt: 322,
    T_CreateForeignTableStmt: 323,
    T_ImportForeignSchemaStmt: 324,
    T_CreateExtensionStmt: 325,
    T_AlterExtensionStmt: 326,
    T_AlterExtensionContentsStmt: 327,
    T_CreateEventTrigStmt: 328,
    T_AlterEventTrigStmt: 329,
    T_RefreshMatViewStmt: 330,
    T_ReplicaIdentityStmt: 331,
    T_AlterSystemStmt: 332,
    T_CreatePolicyStmt: 333,
    T_AlterPolicyStmt: 334,
    T_CreateTransformStmt: 335,
    T_CreateAmStmt: 336,
    T_CreatePublicationStmt: 337,
    T_AlterPublicationStmt: 338,
    T_CreateSubscriptionStmt: 339,
    T_AlterSubscriptionStmt: 340,
    T_DropSubscriptionStmt: 341,
    T_CreateStatsStmt: 342,
    T_AlterCollationStmt: 343,
    T_CallStmt: 344,
    T_AlterStatsStmt: 345,
    T_A_Expr: 346,
    T_ColumnRef: 347,
    T_ParamRef: 348,
    T_A_Const: 349,
    T_FuncCall: 350,
    T_A_Star: 351,
    T_A_Indices: 352,
    T_A_Indirection: 353,
    T_A_ArrayExpr: 354,
    T_ResTarget: 355,
    T_MultiAssignRef: 356,
    T_TypeCast: 357,
    T_CollateClause: 358,
    T_SortBy: 359,
    T_WindowDef: 360,
    T_RangeSubselect: 361,
    T_RangeFunction: 362,
    T_RangeTableSample: 363,
    T_RangeTableFunc: 364,
    T_RangeTableFuncCol: 365,
    T_TypeName: 366,
    T_ColumnDef: 367,
    T_IndexElem: 368,
    T_Constraint: 369,
    T_DefElem: 370,
    T_RangeTblEntry: 371,
    T_RangeTblFunction: 372,
    T_TableSampleClause: 373,
    T_WithCheckOption: 374,
    T_SortGroupClause: 375,
    T_GroupingSet: 376,
    T_WindowClause: 377,
    T_ObjectWithArgs: 378,
    T_AccessPriv: 379,
    T_CreateOpClassItem: 380,
    T_TableLikeClause: 381,
    T_FunctionParameter: 382,
    T_LockingClause: 383,
    T_RowMarkClause: 384,
    T_XmlSerialize: 385,
    T_WithClause: 386,
    T_InferClause: 387,
    T_OnConflictClause: 388,
    T_CommonTableExpr: 389,
    T_RoleSpec: 390,
    T_TriggerTransition: 391,
    T_PartitionElem: 392,
    T_PartitionSpec: 393,
    T_PartitionBoundSpec: 394,
    T_PartitionRangeDatum: 395,
    T_PartitionCmd: 396,
    T_VacuumRelation: 397,
    T_IdentifySystemCmd: 398,
    T_BaseBackupCmd: 399,
    T_CreateReplicationSlotCmd: 400,
    T_DropReplicationSlotCmd: 401,
    T_StartReplicationCmd: 402,
    T_TimeLineHistoryCmd: 403,
    T_SQLCmd: 404,
    T_TriggerData: 405,
    T_EventTriggerData: 406,
    T_ReturnSetInfo: 407,
    T_WindowObjectData: 408,
    T_TIDBitmap: 409,
    T_InlineCodeBlock: 410,
    T_FdwRoutine: 411,
    T_IndexAmRoutine: 412,
    T_TableAmRoutine: 413,
    T_TsmRoutine: 414,
    T_ForeignKeyCacheInfo: 415,
    T_CallContext: 416,
    T_SupportRequestSimplify: 417,
    T_SupportRequestSelectivity: 418,
    T_SupportRequestCost: 419,
    T_SupportRequestRows: 420,
    T_SupportRequestIndexCondition: 421
  },
  CmdType: {
    CMD_UNKNOWN: 0,
    CMD_SELECT: 1,
    CMD_UPDATE: 2,
    CMD_INSERT: 3,
    CMD_DELETE: 4,
    CMD_UTILITY: 5,
    CMD_NOTHING: 6
  },
  JoinType: {
    JOIN_INNER: 0,
    JOIN_LEFT: 1,
    JOIN_FULL: 2,
    JOIN_RIGHT: 3,
    JOIN_SEMI: 4,
    JOIN_ANTI: 5,
    JOIN_UNIQUE_OUTER: 6,
    JOIN_UNIQUE_INNER: 7
  },
  AggStrategy: {
    AGG_PLAIN: 0,
    AGG_SORTED: 1,
    AGG_HASHED: 2,
    AGG_MIXED: 3
  },
  AggSplit: {
    AGGSPLIT_SIMPLE: 0,
    AGGSPLIT_INITIAL_SERIAL: 1,
    AGGSPLIT_FINAL_DESERIAL: 2
  },
  SetOpCmd: {
    SETOPCMD_INTERSECT: 0,
    SETOPCMD_INTERSECT_ALL: 1,
    SETOPCMD_EXCEPT: 2,
    SETOPCMD_EXCEPT_ALL: 3
  },
  SetOpStrategy: {
    SETOP_SORTED: 0,
    SETOP_HASHED: 1
  },
  OnConflictAction: {
    ONCONFLICT_NONE: 0,
    ONCONFLICT_NOTHING: 1,
    ONCONFLICT_UPDATE: 2
  },
  LimitOption: {
    LIMIT_OPTION_DEFAULT: 0,
    LIMIT_OPTION_COUNT: 1,
    LIMIT_OPTION_WITH_TIES: 2
  },
  VacuumOption: {
    VACOPT_VACUUM: 1,
    VACOPT_ANALYZE: 2,
    VACOPT_VERBOSE: 4,
    VACOPT_FREEZE: 8,
    VACOPT_FULL: 16,
    VACOPT_SKIP_LOCKED: 32,
    VACOPT_SKIPTOAST: 64,
    VACOPT_DISABLE_PAGE_SKIPPING: 128
  },
  VacOptTernaryValue: {
    VACOPT_TERNARY_DEFAULT: 0,
    VACOPT_TERNARY_DISABLED: 1,
    VACOPT_TERNARY_ENABLED: 2
  }
};
exports.toInt = toInt;
var toStr = {
  OnCommitAction: {
    "0": "ONCOMMIT_NOOP",
    "1": "ONCOMMIT_PRESERVE_ROWS",
    "2": "ONCOMMIT_DELETE_ROWS",
    "3": "ONCOMMIT_DROP"
  },
  ParamKind: {
    "0": "PARAM_EXTERN",
    "1": "PARAM_EXEC",
    "2": "PARAM_SUBLINK",
    "3": "PARAM_MULTIEXPR"
  },
  CoercionContext: {
    "0": "COERCION_IMPLICIT",
    "1": "COERCION_ASSIGNMENT",
    "2": "COERCION_EXPLICIT"
  },
  CoercionForm: {
    "0": "COERCE_EXPLICIT_CALL",
    "1": "COERCE_EXPLICIT_CAST",
    "2": "COERCE_IMPLICIT_CAST"
  },
  BoolExprType: {
    "0": "AND_EXPR",
    "1": "OR_EXPR",
    "2": "NOT_EXPR"
  },
  SubLinkType: {
    "0": "EXISTS_SUBLINK",
    "1": "ALL_SUBLINK",
    "2": "ANY_SUBLINK",
    "3": "ROWCOMPARE_SUBLINK",
    "4": "EXPR_SUBLINK",
    "5": "MULTIEXPR_SUBLINK",
    "6": "ARRAY_SUBLINK",
    "7": "CTE_SUBLINK"
  },
  RowCompareType: {
    "1": "ROWCOMPARE_LT",
    "2": "ROWCOMPARE_LE",
    "3": "ROWCOMPARE_EQ",
    "4": "ROWCOMPARE_GE",
    "5": "ROWCOMPARE_GT",
    "6": "ROWCOMPARE_NE"
  },
  MinMaxOp: {
    "0": "IS_GREATEST",
    "1": "IS_LEAST"
  },
  SQLValueFunctionOp: {
    "0": "SVFOP_CURRENT_DATE",
    "1": "SVFOP_CURRENT_TIME",
    "2": "SVFOP_CURRENT_TIME_N",
    "3": "SVFOP_CURRENT_TIMESTAMP",
    "4": "SVFOP_CURRENT_TIMESTAMP_N",
    "5": "SVFOP_LOCALTIME",
    "6": "SVFOP_LOCALTIME_N",
    "7": "SVFOP_LOCALTIMESTAMP",
    "8": "SVFOP_LOCALTIMESTAMP_N",
    "9": "SVFOP_CURRENT_ROLE",
    "10": "SVFOP_CURRENT_USER",
    "11": "SVFOP_USER",
    "12": "SVFOP_SESSION_USER",
    "13": "SVFOP_CURRENT_CATALOG",
    "14": "SVFOP_CURRENT_SCHEMA"
  },
  XmlExprOp: {
    "0": "IS_XMLCONCAT",
    "1": "IS_XMLELEMENT",
    "2": "IS_XMLFOREST",
    "3": "IS_XMLPARSE",
    "4": "IS_XMLPI",
    "5": "IS_XMLROOT",
    "6": "IS_XMLSERIALIZE",
    "7": "IS_DOCUMENT"
  },
  XmlOptionType: {
    "0": "XMLOPTION_DOCUMENT",
    "1": "XMLOPTION_CONTENT"
  },
  NullTestType: {
    "0": "IS_NULL",
    "1": "IS_NOT_NULL"
  },
  BoolTestType: {
    "0": "IS_TRUE",
    "1": "IS_NOT_TRUE",
    "2": "IS_FALSE",
    "3": "IS_NOT_FALSE",
    "4": "IS_UNKNOWN",
    "5": "IS_NOT_UNKNOWN"
  },
  OverridingKind: {
    "0": "OVERRIDING_NOT_SET",
    "1": "OVERRIDING_USER_VALUE",
    "2": "OVERRIDING_SYSTEM_VALUE"
  },
  QuerySource: {
    "0": "QSRC_ORIGINAL",
    "1": "QSRC_PARSER",
    "2": "QSRC_INSTEAD_RULE",
    "3": "QSRC_QUAL_INSTEAD_RULE",
    "4": "QSRC_NON_INSTEAD_RULE"
  },
  SortByDir: {
    "0": "SORTBY_DEFAULT",
    "1": "SORTBY_ASC",
    "2": "SORTBY_DESC",
    "3": "SORTBY_USING"
  },
  SortByNulls: {
    "0": "SORTBY_NULLS_DEFAULT",
    "1": "SORTBY_NULLS_FIRST",
    "2": "SORTBY_NULLS_LAST"
  },
  A_Expr_Kind: {
    "0": "AEXPR_OP",
    "1": "AEXPR_OP_ANY",
    "2": "AEXPR_OP_ALL",
    "3": "AEXPR_DISTINCT",
    "4": "AEXPR_NOT_DISTINCT",
    "5": "AEXPR_NULLIF",
    "6": "AEXPR_OF",
    "7": "AEXPR_IN",
    "8": "AEXPR_LIKE",
    "9": "AEXPR_ILIKE",
    "10": "AEXPR_SIMILAR",
    "11": "AEXPR_BETWEEN",
    "12": "AEXPR_NOT_BETWEEN",
    "13": "AEXPR_BETWEEN_SYM",
    "14": "AEXPR_NOT_BETWEEN_SYM",
    "15": "AEXPR_PAREN"
  },
  RoleSpecType: {
    "0": "ROLESPEC_CSTRING",
    "1": "ROLESPEC_CURRENT_USER",
    "2": "ROLESPEC_SESSION_USER",
    "3": "ROLESPEC_PUBLIC"
  },
  TableLikeOption: {
    "1": "CREATE_TABLE_LIKE_COMMENTS",
    "2": "CREATE_TABLE_LIKE_CONSTRAINTS",
    "4": "CREATE_TABLE_LIKE_DEFAULTS",
    "8": "CREATE_TABLE_LIKE_GENERATED",
    "16": "CREATE_TABLE_LIKE_IDENTITY",
    "32": "CREATE_TABLE_LIKE_INDEXES",
    "64": "CREATE_TABLE_LIKE_STATISTICS",
    "128": "CREATE_TABLE_LIKE_STORAGE",
    "2147483647": "CREATE_TABLE_LIKE_ALL"
  },
  DefElemAction: {
    "0": "DEFELEM_UNSPEC",
    "1": "DEFELEM_SET",
    "2": "DEFELEM_ADD",
    "3": "DEFELEM_DROP"
  },
  PartitionRangeDatumKind: {
    "0": "PARTITION_RANGE_DATUM_VALUE",
    "1": "PARTITION_RANGE_DATUM_MAXVALUE"
  },
  RTEKind: {
    "0": "RTE_RELATION",
    "1": "RTE_SUBQUERY",
    "2": "RTE_JOIN",
    "3": "RTE_FUNCTION",
    "4": "RTE_TABLEFUNC",
    "5": "RTE_VALUES",
    "6": "RTE_CTE",
    "7": "RTE_NAMEDTUPLESTORE",
    "8": "RTE_RESULT"
  },
  WCOKind: {
    "0": "WCO_VIEW_CHECK",
    "1": "WCO_RLS_INSERT_CHECK",
    "2": "WCO_RLS_UPDATE_CHECK",
    "3": "WCO_RLS_CONFLICT_CHECK"
  },
  GroupingSetKind: {
    "0": "GROUPING_SET_EMPTY",
    "1": "GROUPING_SET_SIMPLE",
    "2": "GROUPING_SET_ROLLUP",
    "3": "GROUPING_SET_CUBE",
    "4": "GROUPING_SET_SETS"
  },
  CTEMaterialize: {
    "0": "CTEMaterializeDefault",
    "1": "CTEMaterializeAlways",
    "2": "CTEMaterializeNever"
  },
  SetOperation: {
    "0": "SETOP_NONE",
    "1": "SETOP_UNION",
    "2": "SETOP_INTERSECT",
    "3": "SETOP_EXCEPT"
  },
  ObjectType: {
    "0": "OBJECT_ACCESS_METHOD",
    "1": "OBJECT_AGGREGATE",
    "2": "OBJECT_AMOP",
    "3": "OBJECT_AMPROC",
    "4": "OBJECT_ATTRIBUTE",
    "5": "OBJECT_CAST",
    "6": "OBJECT_COLUMN",
    "7": "OBJECT_COLLATION",
    "8": "OBJECT_CONVERSION",
    "9": "OBJECT_DATABASE",
    "10": "OBJECT_DEFAULT",
    "11": "OBJECT_DEFACL",
    "12": "OBJECT_DOMAIN",
    "13": "OBJECT_DOMCONSTRAINT",
    "14": "OBJECT_EVENT_TRIGGER",
    "15": "OBJECT_EXTENSION",
    "16": "OBJECT_FDW",
    "17": "OBJECT_FOREIGN_SERVER",
    "18": "OBJECT_FOREIGN_TABLE",
    "19": "OBJECT_FUNCTION",
    "20": "OBJECT_INDEX",
    "21": "OBJECT_LANGUAGE",
    "22": "OBJECT_LARGEOBJECT",
    "23": "OBJECT_MATVIEW",
    "24": "OBJECT_OPCLASS",
    "25": "OBJECT_OPERATOR",
    "26": "OBJECT_OPFAMILY",
    "27": "OBJECT_POLICY",
    "28": "OBJECT_PROCEDURE",
    "29": "OBJECT_PUBLICATION",
    "30": "OBJECT_PUBLICATION_REL",
    "31": "OBJECT_ROLE",
    "32": "OBJECT_ROUTINE",
    "33": "OBJECT_RULE",
    "34": "OBJECT_SCHEMA",
    "35": "OBJECT_SEQUENCE",
    "36": "OBJECT_SUBSCRIPTION",
    "37": "OBJECT_STATISTIC_EXT",
    "38": "OBJECT_TABCONSTRAINT",
    "39": "OBJECT_TABLE",
    "40": "OBJECT_TABLESPACE",
    "41": "OBJECT_TRANSFORM",
    "42": "OBJECT_TRIGGER",
    "43": "OBJECT_TSCONFIGURATION",
    "44": "OBJECT_TSDICTIONARY",
    "45": "OBJECT_TSPARSER",
    "46": "OBJECT_TSTEMPLATE",
    "47": "OBJECT_TYPE",
    "48": "OBJECT_USER_MAPPING",
    "49": "OBJECT_VIEW"
  },
  DropBehavior: {
    "0": "DROP_RESTRICT",
    "1": "DROP_CASCADE"
  },
  AlterTableType: {
    "0": "AT_AddColumn",
    "1": "AT_AddColumnRecurse",
    "2": "AT_AddColumnToView",
    "3": "AT_ColumnDefault",
    "4": "AT_CookedColumnDefault",
    "5": "AT_DropNotNull",
    "6": "AT_SetNotNull",
    "7": "AT_DropExpression",
    "8": "AT_CheckNotNull",
    "9": "AT_SetStatistics",
    "10": "AT_SetOptions",
    "11": "AT_ResetOptions",
    "12": "AT_SetStorage",
    "13": "AT_DropColumn",
    "14": "AT_DropColumnRecurse",
    "15": "AT_AddIndex",
    "16": "AT_ReAddIndex",
    "17": "AT_AddConstraint",
    "18": "AT_AddConstraintRecurse",
    "19": "AT_ReAddConstraint",
    "20": "AT_ReAddDomainConstraint",
    "21": "AT_AlterConstraint",
    "22": "AT_ValidateConstraint",
    "23": "AT_ValidateConstraintRecurse",
    "24": "AT_AddIndexConstraint",
    "25": "AT_DropConstraint",
    "26": "AT_DropConstraintRecurse",
    "27": "AT_ReAddComment",
    "28": "AT_AlterColumnType",
    "29": "AT_AlterColumnGenericOptions",
    "30": "AT_ChangeOwner",
    "31": "AT_ClusterOn",
    "32": "AT_DropCluster",
    "33": "AT_SetLogged",
    "34": "AT_SetUnLogged",
    "35": "AT_DropOids",
    "36": "AT_SetTableSpace",
    "37": "AT_SetRelOptions",
    "38": "AT_ResetRelOptions",
    "39": "AT_ReplaceRelOptions",
    "40": "AT_EnableTrig",
    "41": "AT_EnableAlwaysTrig",
    "42": "AT_EnableReplicaTrig",
    "43": "AT_DisableTrig",
    "44": "AT_EnableTrigAll",
    "45": "AT_DisableTrigAll",
    "46": "AT_EnableTrigUser",
    "47": "AT_DisableTrigUser",
    "48": "AT_EnableRule",
    "49": "AT_EnableAlwaysRule",
    "50": "AT_EnableReplicaRule",
    "51": "AT_DisableRule",
    "52": "AT_AddInherit",
    "53": "AT_DropInherit",
    "54": "AT_AddOf",
    "55": "AT_DropOf",
    "56": "AT_ReplicaIdentity",
    "57": "AT_EnableRowSecurity",
    "58": "AT_DisableRowSecurity",
    "59": "AT_ForceRowSecurity",
    "60": "AT_NoForceRowSecurity",
    "61": "AT_GenericOptions",
    "62": "AT_AttachPartition",
    "63": "AT_DetachPartition",
    "64": "AT_AddIdentity",
    "65": "AT_SetIdentity",
    "66": "AT_DropIdentity"
  },
  GrantTargetType: {
    "0": "ACL_TARGET_OBJECT",
    "1": "ACL_TARGET_ALL_IN_SCHEMA",
    "2": "ACL_TARGET_DEFAULTS"
  },
  VariableSetKind: {
    "0": "VAR_SET_VALUE",
    "1": "VAR_SET_DEFAULT",
    "2": "VAR_SET_CURRENT",
    "3": "VAR_SET_MULTI",
    "4": "VAR_RESET",
    "5": "VAR_RESET_ALL"
  },
  ConstrType: {
    "0": "CONSTR_NULL",
    "1": "CONSTR_NOTNULL",
    "2": "CONSTR_DEFAULT",
    "3": "CONSTR_IDENTITY",
    "4": "CONSTR_GENERATED",
    "5": "CONSTR_CHECK",
    "6": "CONSTR_PRIMARY",
    "7": "CONSTR_UNIQUE",
    "8": "CONSTR_EXCLUSION",
    "9": "CONSTR_FOREIGN",
    "10": "CONSTR_ATTR_DEFERRABLE",
    "11": "CONSTR_ATTR_NOT_DEFERRABLE",
    "12": "CONSTR_ATTR_DEFERRED",
    "13": "CONSTR_ATTR_IMMEDIATE"
  },
  ImportForeignSchemaType: {
    "0": "FDW_IMPORT_SCHEMA_ALL",
    "1": "FDW_IMPORT_SCHEMA_LIMIT_TO",
    "2": "FDW_IMPORT_SCHEMA_EXCEPT"
  },
  RoleStmtType: {
    "0": "ROLESTMT_ROLE",
    "1": "ROLESTMT_USER",
    "2": "ROLESTMT_GROUP"
  },
  FetchDirection: {
    "0": "FETCH_FORWARD",
    "1": "FETCH_BACKWARD",
    "2": "FETCH_ABSOLUTE",
    "3": "FETCH_RELATIVE"
  },
  FunctionParameterMode: {
    "98": "FUNC_PARAM_INOUT",
    "105": "FUNC_PARAM_IN",
    "111": "FUNC_PARAM_OUT",
    "116": "FUNC_PARAM_TABLE",
    "118": "FUNC_PARAM_VARIADIC"
  },
  TransactionStmtKind: {
    "0": "TRANS_STMT_BEGIN",
    "1": "TRANS_STMT_START",
    "2": "TRANS_STMT_COMMIT",
    "3": "TRANS_STMT_ROLLBACK",
    "4": "TRANS_STMT_SAVEPOINT",
    "5": "TRANS_STMT_RELEASE",
    "6": "TRANS_STMT_ROLLBACK_TO",
    "7": "TRANS_STMT_PREPARE",
    "8": "TRANS_STMT_COMMIT_PREPARED",
    "9": "TRANS_STMT_ROLLBACK_PREPARED"
  },
  ViewCheckOption: {
    "0": "NO_CHECK_OPTION",
    "1": "LOCAL_CHECK_OPTION",
    "2": "CASCADED_CHECK_OPTION"
  },
  ClusterOption: {
    "1": "CLUOPT_RECHECK",
    "2": "CLUOPT_VERBOSE"
  },
  DiscardMode: {
    "0": "DISCARD_ALL",
    "1": "DISCARD_PLANS",
    "2": "DISCARD_SEQUENCES",
    "3": "DISCARD_TEMP"
  },
  ReindexObjectType: {
    "0": "REINDEX_OBJECT_INDEX",
    "1": "REINDEX_OBJECT_TABLE",
    "2": "REINDEX_OBJECT_SCHEMA",
    "3": "REINDEX_OBJECT_SYSTEM",
    "4": "REINDEX_OBJECT_DATABASE"
  },
  AlterTSConfigType: {
    "0": "ALTER_TSCONFIG_ADD_MAPPING",
    "1": "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN",
    "2": "ALTER_TSCONFIG_REPLACE_DICT",
    "3": "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN",
    "4": "ALTER_TSCONFIG_DROP_MAPPING"
  },
  AlterSubscriptionType: {
    "0": "ALTER_SUBSCRIPTION_OPTIONS",
    "1": "ALTER_SUBSCRIPTION_CONNECTION",
    "2": "ALTER_SUBSCRIPTION_PUBLICATION",
    "3": "ALTER_SUBSCRIPTION_REFRESH",
    "4": "ALTER_SUBSCRIPTION_ENABLED"
  },
  LockClauseStrength: {
    "0": "LCS_NONE",
    "1": "LCS_FORKEYSHARE",
    "2": "LCS_FORSHARE",
    "3": "LCS_FORNOKEYUPDATE",
    "4": "LCS_FORUPDATE"
  },
  LockWaitPolicy: {
    "0": "LockWaitBlock",
    "1": "LockWaitSkip",
    "2": "LockWaitError"
  },
  LockTupleMode: {
    "0": "LockTupleKeyShare",
    "1": "LockTupleShare",
    "2": "LockTupleNoKeyExclusive",
    "3": "LockTupleExclusive"
  },
  NodeTag: {
    "0": "T_Invalid",
    "1": "T_IndexInfo",
    "2": "T_ExprContext",
    "3": "T_ProjectionInfo",
    "4": "T_JunkFilter",
    "5": "T_OnConflictSetState",
    "6": "T_ResultRelInfo",
    "7": "T_EState",
    "8": "T_TupleTableSlot",
    "9": "T_Plan",
    "10": "T_Result",
    "11": "T_ProjectSet",
    "12": "T_ModifyTable",
    "13": "T_Append",
    "14": "T_MergeAppend",
    "15": "T_RecursiveUnion",
    "16": "T_BitmapAnd",
    "17": "T_BitmapOr",
    "18": "T_Scan",
    "19": "T_SeqScan",
    "20": "T_SampleScan",
    "21": "T_IndexScan",
    "22": "T_IndexOnlyScan",
    "23": "T_BitmapIndexScan",
    "24": "T_BitmapHeapScan",
    "25": "T_TidScan",
    "26": "T_SubqueryScan",
    "27": "T_FunctionScan",
    "28": "T_ValuesScan",
    "29": "T_TableFuncScan",
    "30": "T_CteScan",
    "31": "T_NamedTuplestoreScan",
    "32": "T_WorkTableScan",
    "33": "T_ForeignScan",
    "34": "T_CustomScan",
    "35": "T_Join",
    "36": "T_NestLoop",
    "37": "T_MergeJoin",
    "38": "T_HashJoin",
    "39": "T_Material",
    "40": "T_Sort",
    "41": "T_IncrementalSort",
    "42": "T_Group",
    "43": "T_Agg",
    "44": "T_WindowAgg",
    "45": "T_Unique",
    "46": "T_Gather",
    "47": "T_GatherMerge",
    "48": "T_Hash",
    "49": "T_SetOp",
    "50": "T_LockRows",
    "51": "T_Limit",
    "52": "T_NestLoopParam",
    "53": "T_PlanRowMark",
    "54": "T_PartitionPruneInfo",
    "55": "T_PartitionedRelPruneInfo",
    "56": "T_PartitionPruneStepOp",
    "57": "T_PartitionPruneStepCombine",
    "58": "T_PlanInvalItem",
    "59": "T_PlanState",
    "60": "T_ResultState",
    "61": "T_ProjectSetState",
    "62": "T_ModifyTableState",
    "63": "T_AppendState",
    "64": "T_MergeAppendState",
    "65": "T_RecursiveUnionState",
    "66": "T_BitmapAndState",
    "67": "T_BitmapOrState",
    "68": "T_ScanState",
    "69": "T_SeqScanState",
    "70": "T_SampleScanState",
    "71": "T_IndexScanState",
    "72": "T_IndexOnlyScanState",
    "73": "T_BitmapIndexScanState",
    "74": "T_BitmapHeapScanState",
    "75": "T_TidScanState",
    "76": "T_SubqueryScanState",
    "77": "T_FunctionScanState",
    "78": "T_TableFuncScanState",
    "79": "T_ValuesScanState",
    "80": "T_CteScanState",
    "81": "T_NamedTuplestoreScanState",
    "82": "T_WorkTableScanState",
    "83": "T_ForeignScanState",
    "84": "T_CustomScanState",
    "85": "T_JoinState",
    "86": "T_NestLoopState",
    "87": "T_MergeJoinState",
    "88": "T_HashJoinState",
    "89": "T_MaterialState",
    "90": "T_SortState",
    "91": "T_IncrementalSortState",
    "92": "T_GroupState",
    "93": "T_AggState",
    "94": "T_WindowAggState",
    "95": "T_UniqueState",
    "96": "T_GatherState",
    "97": "T_GatherMergeState",
    "98": "T_HashState",
    "99": "T_SetOpState",
    "100": "T_LockRowsState",
    "101": "T_LimitState",
    "102": "T_Alias",
    "103": "T_RangeVar",
    "104": "T_TableFunc",
    "105": "T_Expr",
    "106": "T_Var",
    "107": "T_Const",
    "108": "T_Param",
    "109": "T_Aggref",
    "110": "T_GroupingFunc",
    "111": "T_WindowFunc",
    "112": "T_SubscriptingRef",
    "113": "T_FuncExpr",
    "114": "T_NamedArgExpr",
    "115": "T_OpExpr",
    "116": "T_DistinctExpr",
    "117": "T_NullIfExpr",
    "118": "T_ScalarArrayOpExpr",
    "119": "T_BoolExpr",
    "120": "T_SubLink",
    "121": "T_SubPlan",
    "122": "T_AlternativeSubPlan",
    "123": "T_FieldSelect",
    "124": "T_FieldStore",
    "125": "T_RelabelType",
    "126": "T_CoerceViaIO",
    "127": "T_ArrayCoerceExpr",
    "128": "T_ConvertRowtypeExpr",
    "129": "T_CollateExpr",
    "130": "T_CaseExpr",
    "131": "T_CaseWhen",
    "132": "T_CaseTestExpr",
    "133": "T_ArrayExpr",
    "134": "T_RowExpr",
    "135": "T_RowCompareExpr",
    "136": "T_CoalesceExpr",
    "137": "T_MinMaxExpr",
    "138": "T_SQLValueFunction",
    "139": "T_XmlExpr",
    "140": "T_NullTest",
    "141": "T_BooleanTest",
    "142": "T_CoerceToDomain",
    "143": "T_CoerceToDomainValue",
    "144": "T_SetToDefault",
    "145": "T_CurrentOfExpr",
    "146": "T_NextValueExpr",
    "147": "T_InferenceElem",
    "148": "T_TargetEntry",
    "149": "T_RangeTblRef",
    "150": "T_JoinExpr",
    "151": "T_FromExpr",
    "152": "T_OnConflictExpr",
    "153": "T_IntoClause",
    "154": "T_ExprState",
    "155": "T_AggrefExprState",
    "156": "T_WindowFuncExprState",
    "157": "T_SetExprState",
    "158": "T_SubPlanState",
    "159": "T_AlternativeSubPlanState",
    "160": "T_DomainConstraintState",
    "161": "T_PlannerInfo",
    "162": "T_PlannerGlobal",
    "163": "T_RelOptInfo",
    "164": "T_IndexOptInfo",
    "165": "T_ForeignKeyOptInfo",
    "166": "T_ParamPathInfo",
    "167": "T_Path",
    "168": "T_IndexPath",
    "169": "T_BitmapHeapPath",
    "170": "T_BitmapAndPath",
    "171": "T_BitmapOrPath",
    "172": "T_TidPath",
    "173": "T_SubqueryScanPath",
    "174": "T_ForeignPath",
    "175": "T_CustomPath",
    "176": "T_NestPath",
    "177": "T_MergePath",
    "178": "T_HashPath",
    "179": "T_AppendPath",
    "180": "T_MergeAppendPath",
    "181": "T_GroupResultPath",
    "182": "T_MaterialPath",
    "183": "T_UniquePath",
    "184": "T_GatherPath",
    "185": "T_GatherMergePath",
    "186": "T_ProjectionPath",
    "187": "T_ProjectSetPath",
    "188": "T_SortPath",
    "189": "T_IncrementalSortPath",
    "190": "T_GroupPath",
    "191": "T_UpperUniquePath",
    "192": "T_AggPath",
    "193": "T_GroupingSetsPath",
    "194": "T_MinMaxAggPath",
    "195": "T_WindowAggPath",
    "196": "T_SetOpPath",
    "197": "T_RecursiveUnionPath",
    "198": "T_LockRowsPath",
    "199": "T_ModifyTablePath",
    "200": "T_LimitPath",
    "201": "T_EquivalenceClass",
    "202": "T_EquivalenceMember",
    "203": "T_PathKey",
    "204": "T_PathTarget",
    "205": "T_RestrictInfo",
    "206": "T_IndexClause",
    "207": "T_PlaceHolderVar",
    "208": "T_SpecialJoinInfo",
    "209": "T_AppendRelInfo",
    "210": "T_PlaceHolderInfo",
    "211": "T_MinMaxAggInfo",
    "212": "T_PlannerParamItem",
    "213": "T_RollupData",
    "214": "T_GroupingSetData",
    "215": "T_StatisticExtInfo",
    "216": "T_MemoryContext",
    "217": "T_AllocSetContext",
    "218": "T_SlabContext",
    "219": "T_GenerationContext",
    "220": "T_Value",
    "221": "T_Integer",
    "222": "T_Float",
    "223": "T_String",
    "224": "T_BitString",
    "225": "T_Null",
    "226": "T_List",
    "227": "T_IntList",
    "228": "T_OidList",
    "229": "T_ExtensibleNode",
    "230": "T_RawStmt",
    "231": "T_Query",
    "232": "T_PlannedStmt",
    "233": "T_InsertStmt",
    "234": "T_DeleteStmt",
    "235": "T_UpdateStmt",
    "236": "T_SelectStmt",
    "237": "T_AlterTableStmt",
    "238": "T_AlterTableCmd",
    "239": "T_AlterDomainStmt",
    "240": "T_SetOperationStmt",
    "241": "T_GrantStmt",
    "242": "T_GrantRoleStmt",
    "243": "T_AlterDefaultPrivilegesStmt",
    "244": "T_ClosePortalStmt",
    "245": "T_ClusterStmt",
    "246": "T_CopyStmt",
    "247": "T_CreateStmt",
    "248": "T_DefineStmt",
    "249": "T_DropStmt",
    "250": "T_TruncateStmt",
    "251": "T_CommentStmt",
    "252": "T_FetchStmt",
    "253": "T_IndexStmt",
    "254": "T_CreateFunctionStmt",
    "255": "T_AlterFunctionStmt",
    "256": "T_DoStmt",
    "257": "T_RenameStmt",
    "258": "T_RuleStmt",
    "259": "T_NotifyStmt",
    "260": "T_ListenStmt",
    "261": "T_UnlistenStmt",
    "262": "T_TransactionStmt",
    "263": "T_ViewStmt",
    "264": "T_LoadStmt",
    "265": "T_CreateDomainStmt",
    "266": "T_CreatedbStmt",
    "267": "T_DropdbStmt",
    "268": "T_VacuumStmt",
    "269": "T_ExplainStmt",
    "270": "T_CreateTableAsStmt",
    "271": "T_CreateSeqStmt",
    "272": "T_AlterSeqStmt",
    "273": "T_VariableSetStmt",
    "274": "T_VariableShowStmt",
    "275": "T_DiscardStmt",
    "276": "T_CreateTrigStmt",
    "277": "T_CreatePLangStmt",
    "278": "T_CreateRoleStmt",
    "279": "T_AlterRoleStmt",
    "280": "T_DropRoleStmt",
    "281": "T_LockStmt",
    "282": "T_ConstraintsSetStmt",
    "283": "T_ReindexStmt",
    "284": "T_CheckPointStmt",
    "285": "T_CreateSchemaStmt",
    "286": "T_AlterDatabaseStmt",
    "287": "T_AlterDatabaseSetStmt",
    "288": "T_AlterRoleSetStmt",
    "289": "T_CreateConversionStmt",
    "290": "T_CreateCastStmt",
    "291": "T_CreateOpClassStmt",
    "292": "T_CreateOpFamilyStmt",
    "293": "T_AlterOpFamilyStmt",
    "294": "T_PrepareStmt",
    "295": "T_ExecuteStmt",
    "296": "T_DeallocateStmt",
    "297": "T_DeclareCursorStmt",
    "298": "T_CreateTableSpaceStmt",
    "299": "T_DropTableSpaceStmt",
    "300": "T_AlterObjectDependsStmt",
    "301": "T_AlterObjectSchemaStmt",
    "302": "T_AlterOwnerStmt",
    "303": "T_AlterOperatorStmt",
    "304": "T_AlterTypeStmt",
    "305": "T_DropOwnedStmt",
    "306": "T_ReassignOwnedStmt",
    "307": "T_CompositeTypeStmt",
    "308": "T_CreateEnumStmt",
    "309": "T_CreateRangeStmt",
    "310": "T_AlterEnumStmt",
    "311": "T_AlterTSDictionaryStmt",
    "312": "T_AlterTSConfigurationStmt",
    "313": "T_CreateFdwStmt",
    "314": "T_AlterFdwStmt",
    "315": "T_CreateForeignServerStmt",
    "316": "T_AlterForeignServerStmt",
    "317": "T_CreateUserMappingStmt",
    "318": "T_AlterUserMappingStmt",
    "319": "T_DropUserMappingStmt",
    "320": "T_AlterTableSpaceOptionsStmt",
    "321": "T_AlterTableMoveAllStmt",
    "322": "T_SecLabelStmt",
    "323": "T_CreateForeignTableStmt",
    "324": "T_ImportForeignSchemaStmt",
    "325": "T_CreateExtensionStmt",
    "326": "T_AlterExtensionStmt",
    "327": "T_AlterExtensionContentsStmt",
    "328": "T_CreateEventTrigStmt",
    "329": "T_AlterEventTrigStmt",
    "330": "T_RefreshMatViewStmt",
    "331": "T_ReplicaIdentityStmt",
    "332": "T_AlterSystemStmt",
    "333": "T_CreatePolicyStmt",
    "334": "T_AlterPolicyStmt",
    "335": "T_CreateTransformStmt",
    "336": "T_CreateAmStmt",
    "337": "T_CreatePublicationStmt",
    "338": "T_AlterPublicationStmt",
    "339": "T_CreateSubscriptionStmt",
    "340": "T_AlterSubscriptionStmt",
    "341": "T_DropSubscriptionStmt",
    "342": "T_CreateStatsStmt",
    "343": "T_AlterCollationStmt",
    "344": "T_CallStmt",
    "345": "T_AlterStatsStmt",
    "346": "T_A_Expr",
    "347": "T_ColumnRef",
    "348": "T_ParamRef",
    "349": "T_A_Const",
    "350": "T_FuncCall",
    "351": "T_A_Star",
    "352": "T_A_Indices",
    "353": "T_A_Indirection",
    "354": "T_A_ArrayExpr",
    "355": "T_ResTarget",
    "356": "T_MultiAssignRef",
    "357": "T_TypeCast",
    "358": "T_CollateClause",
    "359": "T_SortBy",
    "360": "T_WindowDef",
    "361": "T_RangeSubselect",
    "362": "T_RangeFunction",
    "363": "T_RangeTableSample",
    "364": "T_RangeTableFunc",
    "365": "T_RangeTableFuncCol",
    "366": "T_TypeName",
    "367": "T_ColumnDef",
    "368": "T_IndexElem",
    "369": "T_Constraint",
    "370": "T_DefElem",
    "371": "T_RangeTblEntry",
    "372": "T_RangeTblFunction",
    "373": "T_TableSampleClause",
    "374": "T_WithCheckOption",
    "375": "T_SortGroupClause",
    "376": "T_GroupingSet",
    "377": "T_WindowClause",
    "378": "T_ObjectWithArgs",
    "379": "T_AccessPriv",
    "380": "T_CreateOpClassItem",
    "381": "T_TableLikeClause",
    "382": "T_FunctionParameter",
    "383": "T_LockingClause",
    "384": "T_RowMarkClause",
    "385": "T_XmlSerialize",
    "386": "T_WithClause",
    "387": "T_InferClause",
    "388": "T_OnConflictClause",
    "389": "T_CommonTableExpr",
    "390": "T_RoleSpec",
    "391": "T_TriggerTransition",
    "392": "T_PartitionElem",
    "393": "T_PartitionSpec",
    "394": "T_PartitionBoundSpec",
    "395": "T_PartitionRangeDatum",
    "396": "T_PartitionCmd",
    "397": "T_VacuumRelation",
    "398": "T_IdentifySystemCmd",
    "399": "T_BaseBackupCmd",
    "400": "T_CreateReplicationSlotCmd",
    "401": "T_DropReplicationSlotCmd",
    "402": "T_StartReplicationCmd",
    "403": "T_TimeLineHistoryCmd",
    "404": "T_SQLCmd",
    "405": "T_TriggerData",
    "406": "T_EventTriggerData",
    "407": "T_ReturnSetInfo",
    "408": "T_WindowObjectData",
    "409": "T_TIDBitmap",
    "410": "T_InlineCodeBlock",
    "411": "T_FdwRoutine",
    "412": "T_IndexAmRoutine",
    "413": "T_TableAmRoutine",
    "414": "T_TsmRoutine",
    "415": "T_ForeignKeyCacheInfo",
    "416": "T_CallContext",
    "417": "T_SupportRequestSimplify",
    "418": "T_SupportRequestSelectivity",
    "419": "T_SupportRequestCost",
    "420": "T_SupportRequestRows",
    "421": "T_SupportRequestIndexCondition"
  },
  CmdType: {
    "0": "CMD_UNKNOWN",
    "1": "CMD_SELECT",
    "2": "CMD_UPDATE",
    "3": "CMD_INSERT",
    "4": "CMD_DELETE",
    "5": "CMD_UTILITY",
    "6": "CMD_NOTHING"
  },
  JoinType: {
    "0": "JOIN_INNER",
    "1": "JOIN_LEFT",
    "2": "JOIN_FULL",
    "3": "JOIN_RIGHT",
    "4": "JOIN_SEMI",
    "5": "JOIN_ANTI",
    "6": "JOIN_UNIQUE_OUTER",
    "7": "JOIN_UNIQUE_INNER"
  },
  AggStrategy: {
    "0": "AGG_PLAIN",
    "1": "AGG_SORTED",
    "2": "AGG_HASHED",
    "3": "AGG_MIXED"
  },
  AggSplit: {
    "0": "AGGSPLIT_SIMPLE",
    "1": "AGGSPLIT_INITIAL_SERIAL",
    "2": "AGGSPLIT_FINAL_DESERIAL"
  },
  SetOpCmd: {
    "0": "SETOPCMD_INTERSECT",
    "1": "SETOPCMD_INTERSECT_ALL",
    "2": "SETOPCMD_EXCEPT",
    "3": "SETOPCMD_EXCEPT_ALL"
  },
  SetOpStrategy: {
    "0": "SETOP_SORTED",
    "1": "SETOP_HASHED"
  },
  OnConflictAction: {
    "0": "ONCONFLICT_NONE",
    "1": "ONCONFLICT_NOTHING",
    "2": "ONCONFLICT_UPDATE"
  },
  LimitOption: {
    "0": "LIMIT_OPTION_DEFAULT",
    "1": "LIMIT_OPTION_COUNT",
    "2": "LIMIT_OPTION_WITH_TIES"
  },
  VacuumOption: {
    "1": "VACOPT_VACUUM",
    "2": "VACOPT_ANALYZE",
    "4": "VACOPT_VERBOSE",
    "8": "VACOPT_FREEZE",
    "16": "VACOPT_FULL",
    "32": "VACOPT_SKIP_LOCKED",
    "64": "VACOPT_SKIPTOAST",
    "128": "VACOPT_DISABLE_PAGE_SKIPPING"
  },
  VacOptTernaryValue: {
    "0": "VACOPT_TERNARY_DEFAULT",
    "1": "VACOPT_TERNARY_DISABLED",
    "2": "VACOPT_TERNARY_ENABLED"
  }
};
exports.toStr = toStr;
var nodes = {
  Alias: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    aliasname: {
      type: "char"
    },
    colnames: {
      type: "List"
    }
  },
  RangeVar: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    catalogname: {
      type: "char"
    },
    schemaname: {
      type: "char"
    },
    relname: {
      type: "char"
    },
    inh: {
      type: "bool"
    },
    relpersistence: {
      type: "char"
    },
    alias: {
      type: "Alias",
      nested: true
    },
    location: {
      type: "int"
    }
  },
  TableFunc: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    ns_uris: {
      type: "List"
    },
    ns_names: {
      type: "List"
    },
    docexpr: {
      type: "Node"
    },
    rowexpr: {
      type: "Node"
    },
    colnames: {
      type: "List"
    },
    coltypes: {
      type: "List"
    },
    coltypmods: {
      type: "List"
    },
    colcollations: {
      type: "List"
    },
    colexprs: {
      type: "List"
    },
    coldefexprs: {
      type: "List"
    },
    notnulls: {
      type: "Bitmapset"
    },
    ordinalitycol: {
      type: "int"
    },
    location: {
      type: "int"
    }
  },
  IntoClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    rel: {
      type: "RangeVar",
      nested: true
    },
    colNames: {
      type: "List"
    },
    accessMethod: {
      type: "char"
    },
    options: {
      type: "List"
    },
    onCommit: {
      type: "OnCommitAction",
      "enum": true
    },
    tableSpaceName: {
      type: "char"
    },
    viewQuery: {
      type: "Node"
    },
    skipData: {
      type: "bool"
    }
  },
  Expr: {
    type: {
      type: "NodeTag",
      "enum": true
    }
  },
  Var: {
    xpr: {
      type: "Expr",
      nested: true
    },
    varno: {
      type: "Index"
    },
    varattno: {
      type: "AttrNumber"
    },
    vartype: {
      type: "Oid"
    },
    vartypmod: {
      type: "int32"
    },
    varcollid: {
      type: "Oid"
    },
    varlevelsup: {
      type: "Index"
    },
    varnosyn: {
      type: "Index"
    },
    varattnosyn: {
      type: "AttrNumber"
    },
    location: {
      type: "int"
    }
  },
  Const: {
    xpr: {
      type: "Expr",
      nested: true
    },
    consttype: {
      type: "Oid"
    },
    consttypmod: {
      type: "int32"
    },
    constcollid: {
      type: "Oid"
    },
    constlen: {
      type: "int"
    },
    constvalue: {
      type: "Datum"
    },
    constisnull: {
      type: "bool"
    },
    constbyval: {
      type: "bool"
    },
    location: {
      type: "int"
    }
  },
  Param: {
    xpr: {
      type: "Expr",
      nested: true
    },
    paramkind: {
      type: "ParamKind",
      "enum": true
    },
    paramid: {
      type: "int"
    },
    paramtype: {
      type: "Oid"
    },
    paramtypmod: {
      type: "int32"
    },
    paramcollid: {
      type: "Oid"
    },
    location: {
      type: "int"
    }
  },
  Aggref: {
    xpr: {
      type: "Expr",
      nested: true
    },
    aggfnoid: {
      type: "Oid"
    },
    aggtype: {
      type: "Oid"
    },
    aggcollid: {
      type: "Oid"
    },
    inputcollid: {
      type: "Oid"
    },
    aggtranstype: {
      type: "Oid"
    },
    aggargtypes: {
      type: "List"
    },
    aggdirectargs: {
      type: "List"
    },
    args: {
      type: "List"
    },
    aggorder: {
      type: "List"
    },
    aggdistinct: {
      type: "List"
    },
    aggfilter: {
      type: "Expr",
      nested: true
    },
    aggstar: {
      type: "bool"
    },
    aggvariadic: {
      type: "bool"
    },
    aggkind: {
      type: "char"
    },
    agglevelsup: {
      type: "Index"
    },
    aggsplit: {
      type: "AggSplit",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  GroupingFunc: {
    xpr: {
      type: "Expr",
      nested: true
    },
    args: {
      type: "List"
    },
    refs: {
      type: "List"
    },
    cols: {
      type: "List"
    },
    agglevelsup: {
      type: "Index"
    },
    location: {
      type: "int"
    }
  },
  WindowFunc: {
    xpr: {
      type: "Expr",
      nested: true
    },
    winfnoid: {
      type: "Oid"
    },
    wintype: {
      type: "Oid"
    },
    wincollid: {
      type: "Oid"
    },
    inputcollid: {
      type: "Oid"
    },
    args: {
      type: "List"
    },
    aggfilter: {
      type: "Expr",
      nested: true
    },
    winref: {
      type: "Index"
    },
    winstar: {
      type: "bool"
    },
    winagg: {
      type: "bool"
    },
    location: {
      type: "int"
    }
  },
  SubscriptingRef: {
    xpr: {
      type: "Expr",
      nested: true
    },
    refcontainertype: {
      type: "Oid"
    },
    refelemtype: {
      type: "Oid"
    },
    reftypmod: {
      type: "int32"
    },
    refcollid: {
      type: "Oid"
    },
    refupperindexpr: {
      type: "List"
    },
    reflowerindexpr: {
      type: "List"
    },
    refexpr: {
      type: "Expr",
      nested: true
    },
    refassgnexpr: {
      type: "Expr",
      nested: true
    }
  },
  FuncExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    funcid: {
      type: "Oid"
    },
    funcresulttype: {
      type: "Oid"
    },
    funcretset: {
      type: "bool"
    },
    funcvariadic: {
      type: "bool"
    },
    funcformat: {
      type: "CoercionForm",
      "enum": true
    },
    funccollid: {
      type: "Oid"
    },
    inputcollid: {
      type: "Oid"
    },
    args: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  NamedArgExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    name: {
      type: "char"
    },
    argnumber: {
      type: "int"
    },
    location: {
      type: "int"
    }
  },
  OpExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    opno: {
      type: "Oid"
    },
    opfuncid: {
      type: "Oid"
    },
    opresulttype: {
      type: "Oid"
    },
    opretset: {
      type: "bool"
    },
    opcollid: {
      type: "Oid"
    },
    inputcollid: {
      type: "Oid"
    },
    args: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  ScalarArrayOpExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    opno: {
      type: "Oid"
    },
    opfuncid: {
      type: "Oid"
    },
    useOr: {
      type: "bool"
    },
    inputcollid: {
      type: "Oid"
    },
    args: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  BoolExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    boolop: {
      type: "BoolExprType",
      "enum": true
    },
    args: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  SubLink: {
    xpr: {
      type: "Expr",
      nested: true
    },
    subLinkType: {
      type: "SubLinkType",
      "enum": true
    },
    subLinkId: {
      type: "int"
    },
    testexpr: {
      type: "Node"
    },
    operName: {
      type: "List"
    },
    subselect: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  SubPlan: {
    xpr: {
      type: "Expr",
      nested: true
    },
    subLinkType: {
      type: "SubLinkType",
      "enum": true
    },
    testexpr: {
      type: "Node"
    },
    paramIds: {
      type: "List"
    },
    plan_id: {
      type: "int"
    },
    plan_name: {
      type: "char"
    },
    firstColType: {
      type: "Oid"
    },
    firstColTypmod: {
      type: "int32"
    },
    firstColCollation: {
      type: "Oid"
    },
    useHashTable: {
      type: "bool"
    },
    unknownEqFalse: {
      type: "bool"
    },
    parallel_safe: {
      type: "bool"
    },
    setParam: {
      type: "List"
    },
    parParam: {
      type: "List"
    },
    args: {
      type: "List"
    },
    startup_cost: {
      type: "Cost"
    },
    per_call_cost: {
      type: "Cost"
    }
  },
  AlternativeSubPlan: {
    xpr: {
      type: "Expr",
      nested: true
    },
    subplans: {
      type: "List"
    }
  },
  FieldSelect: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    fieldnum: {
      type: "AttrNumber"
    },
    resulttype: {
      type: "Oid"
    },
    resulttypmod: {
      type: "int32"
    },
    resultcollid: {
      type: "Oid"
    }
  },
  FieldStore: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    newvals: {
      type: "List"
    },
    fieldnums: {
      type: "List"
    },
    resulttype: {
      type: "Oid"
    }
  },
  RelabelType: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    resulttype: {
      type: "Oid"
    },
    resulttypmod: {
      type: "int32"
    },
    resultcollid: {
      type: "Oid"
    },
    relabelformat: {
      type: "CoercionForm",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  CoerceViaIO: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    resulttype: {
      type: "Oid"
    },
    resultcollid: {
      type: "Oid"
    },
    coerceformat: {
      type: "CoercionForm",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  ArrayCoerceExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    elemexpr: {
      type: "Expr",
      nested: true
    },
    resulttype: {
      type: "Oid"
    },
    resulttypmod: {
      type: "int32"
    },
    resultcollid: {
      type: "Oid"
    },
    coerceformat: {
      type: "CoercionForm",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  ConvertRowtypeExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    resulttype: {
      type: "Oid"
    },
    convertformat: {
      type: "CoercionForm",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  CollateExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    collOid: {
      type: "Oid"
    },
    location: {
      type: "int"
    }
  },
  CaseExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    casetype: {
      type: "Oid"
    },
    casecollid: {
      type: "Oid"
    },
    arg: {
      type: "Expr",
      nested: true
    },
    args: {
      type: "List"
    },
    defresult: {
      type: "Expr",
      nested: true
    },
    location: {
      type: "int"
    }
  },
  CaseWhen: {
    xpr: {
      type: "Expr",
      nested: true
    },
    expr: {
      type: "Expr",
      nested: true
    },
    result: {
      type: "Expr",
      nested: true
    },
    location: {
      type: "int"
    }
  },
  CaseTestExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    typeId: {
      type: "Oid"
    },
    typeMod: {
      type: "int32"
    },
    collation: {
      type: "Oid"
    }
  },
  ArrayExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    array_typeid: {
      type: "Oid"
    },
    array_collid: {
      type: "Oid"
    },
    element_typeid: {
      type: "Oid"
    },
    elements: {
      type: "List"
    },
    multidims: {
      type: "bool"
    },
    location: {
      type: "int"
    }
  },
  RowExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    args: {
      type: "List"
    },
    row_typeid: {
      type: "Oid"
    },
    row_format: {
      type: "CoercionForm",
      "enum": true
    },
    colnames: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  RowCompareExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    rctype: {
      type: "RowCompareType",
      "enum": true
    },
    opnos: {
      type: "List"
    },
    opfamilies: {
      type: "List"
    },
    inputcollids: {
      type: "List"
    },
    largs: {
      type: "List"
    },
    rargs: {
      type: "List"
    }
  },
  CoalesceExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    coalescetype: {
      type: "Oid"
    },
    coalescecollid: {
      type: "Oid"
    },
    args: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  MinMaxExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    minmaxtype: {
      type: "Oid"
    },
    minmaxcollid: {
      type: "Oid"
    },
    inputcollid: {
      type: "Oid"
    },
    op: {
      type: "MinMaxOp",
      "enum": true
    },
    args: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  SQLValueFunction: {
    xpr: {
      type: "Expr",
      nested: true
    },
    op: {
      type: "SQLValueFunctionOp",
      "enum": true
    },
    type: {
      type: "Oid"
    },
    typmod: {
      type: "int32"
    },
    location: {
      type: "int"
    }
  },
  XmlExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    op: {
      type: "XmlExprOp",
      "enum": true
    },
    name: {
      type: "char"
    },
    named_args: {
      type: "List"
    },
    arg_names: {
      type: "List"
    },
    args: {
      type: "List"
    },
    xmloption: {
      type: "XmlOptionType",
      "enum": true
    },
    type: {
      type: "Oid"
    },
    typmod: {
      type: "int32"
    },
    location: {
      type: "int"
    }
  },
  NullTest: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    nulltesttype: {
      type: "NullTestType",
      "enum": true
    },
    argisrow: {
      type: "bool"
    },
    location: {
      type: "int"
    }
  },
  BooleanTest: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    booltesttype: {
      type: "BoolTestType",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  CoerceToDomain: {
    xpr: {
      type: "Expr",
      nested: true
    },
    arg: {
      type: "Expr",
      nested: true
    },
    resulttype: {
      type: "Oid"
    },
    resulttypmod: {
      type: "int32"
    },
    resultcollid: {
      type: "Oid"
    },
    coercionformat: {
      type: "CoercionForm",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  CoerceToDomainValue: {
    xpr: {
      type: "Expr",
      nested: true
    },
    typeId: {
      type: "Oid"
    },
    typeMod: {
      type: "int32"
    },
    collation: {
      type: "Oid"
    },
    location: {
      type: "int"
    }
  },
  SetToDefault: {
    xpr: {
      type: "Expr",
      nested: true
    },
    typeId: {
      type: "Oid"
    },
    typeMod: {
      type: "int32"
    },
    collation: {
      type: "Oid"
    },
    location: {
      type: "int"
    }
  },
  CurrentOfExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    cvarno: {
      type: "Index"
    },
    cursor_name: {
      type: "char"
    },
    cursor_param: {
      type: "int"
    }
  },
  NextValueExpr: {
    xpr: {
      type: "Expr",
      nested: true
    },
    seqid: {
      type: "Oid"
    },
    typeId: {
      type: "Oid"
    }
  },
  InferenceElem: {
    xpr: {
      type: "Expr",
      nested: true
    },
    expr: {
      type: "Node"
    },
    infercollid: {
      type: "Oid"
    },
    inferopclass: {
      type: "Oid"
    }
  },
  TargetEntry: {
    xpr: {
      type: "Expr",
      nested: true
    },
    expr: {
      type: "Expr",
      nested: true
    },
    resno: {
      type: "AttrNumber"
    },
    resname: {
      type: "char"
    },
    ressortgroupref: {
      type: "Index"
    },
    resorigtbl: {
      type: "Oid"
    },
    resorigcol: {
      type: "AttrNumber"
    },
    resjunk: {
      type: "bool"
    }
  },
  RangeTblRef: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    rtindex: {
      type: "int"
    }
  },
  JoinExpr: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    jointype: {
      type: "JoinType",
      "enum": true
    },
    isNatural: {
      type: "bool"
    },
    larg: {
      type: "Node"
    },
    rarg: {
      type: "Node"
    },
    usingClause: {
      type: "List"
    },
    quals: {
      type: "Node"
    },
    alias: {
      type: "Alias",
      nested: true
    },
    rtindex: {
      type: "int"
    }
  },
  FromExpr: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    fromlist: {
      type: "List"
    },
    quals: {
      type: "Node"
    }
  },
  OnConflictExpr: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    action: {
      type: "OnConflictAction",
      "enum": true
    },
    arbiterElems: {
      type: "List"
    },
    arbiterWhere: {
      type: "Node"
    },
    constraint: {
      type: "Oid"
    },
    onConflictSet: {
      type: "List"
    },
    onConflictWhere: {
      type: "Node"
    },
    exclRelIndex: {
      type: "int"
    },
    exclRelTlist: {
      type: "List"
    }
  },
  Query: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    commandType: {
      type: "CmdType",
      "enum": true
    },
    querySource: {
      type: "QuerySource",
      "enum": true
    },
    queryId: {
      type: "uint64"
    },
    canSetTag: {
      type: "bool"
    },
    utilityStmt: {
      type: "Node"
    },
    resultRelation: {
      type: "int"
    },
    hasAggs: {
      type: "bool"
    },
    hasWindowFuncs: {
      type: "bool"
    },
    hasTargetSRFs: {
      type: "bool"
    },
    hasSubLinks: {
      type: "bool"
    },
    hasDistinctOn: {
      type: "bool"
    },
    hasRecursive: {
      type: "bool"
    },
    hasModifyingCTE: {
      type: "bool"
    },
    hasForUpdate: {
      type: "bool"
    },
    hasRowSecurity: {
      type: "bool"
    },
    cteList: {
      type: "List"
    },
    rtable: {
      type: "List"
    },
    jointree: {
      type: "FromExpr"
    },
    targetList: {
      type: "List"
    },
    override: {
      type: "OverridingKind",
      "enum": true
    },
    onConflict: {
      type: "OnConflictExpr"
    },
    returningList: {
      type: "List"
    },
    groupClause: {
      type: "List"
    },
    groupingSets: {
      type: "List"
    },
    havingQual: {
      type: "Node"
    },
    windowClause: {
      type: "List"
    },
    distinctClause: {
      type: "List"
    },
    sortClause: {
      type: "List"
    },
    limitOffset: {
      type: "Node"
    },
    limitCount: {
      type: "Node"
    },
    limitOption: {
      type: "LimitOption",
      "enum": true
    },
    rowMarks: {
      type: "List"
    },
    setOperations: {
      type: "Node"
    },
    constraintDeps: {
      type: "List"
    },
    withCheckOptions: {
      type: "List"
    },
    stmt_location: {
      type: "int"
    },
    stmt_len: {
      type: "int"
    }
  },
  TypeName: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    names: {
      type: "List"
    },
    typeOid: {
      type: "Oid"
    },
    setof: {
      type: "bool"
    },
    pct_type: {
      type: "bool"
    },
    typmods: {
      type: "List"
    },
    typemod: {
      type: "int32"
    },
    arrayBounds: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  ColumnRef: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    fields: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  ParamRef: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    number: {
      type: "int"
    },
    location: {
      type: "int"
    }
  },
  A_Expr: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "A_Expr_Kind",
      "enum": true
    },
    name: {
      type: "List"
    },
    lexpr: {
      type: "Node"
    },
    rexpr: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  A_Const: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    val: {
      type: "Value"
    },
    location: {
      type: "int"
    }
  },
  TypeCast: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    arg: {
      type: "Node"
    },
    typeName: {
      type: "TypeName",
      nested: true
    },
    location: {
      type: "int"
    }
  },
  CollateClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    arg: {
      type: "Node"
    },
    collname: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  RoleSpec: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    roletype: {
      type: "RoleSpecType",
      "enum": true
    },
    rolename: {
      type: "char"
    },
    location: {
      type: "int"
    }
  },
  FuncCall: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    funcname: {
      type: "List"
    },
    args: {
      type: "List"
    },
    agg_order: {
      type: "List"
    },
    agg_filter: {
      type: "Node"
    },
    agg_within_group: {
      type: "bool"
    },
    agg_star: {
      type: "bool"
    },
    agg_distinct: {
      type: "bool"
    },
    func_variadic: {
      type: "bool"
    },
    over: {
      type: "WindowDef",
      nested: true
    },
    location: {
      type: "int"
    }
  },
  A_Star: {
    type: {
      type: "NodeTag",
      "enum": true
    }
  },
  A_Indices: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    is_slice: {
      type: "bool"
    },
    lidx: {
      type: "Node"
    },
    uidx: {
      type: "Node"
    }
  },
  A_Indirection: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    arg: {
      type: "Node"
    },
    indirection: {
      type: "List"
    }
  },
  A_ArrayExpr: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    elements: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  ResTarget: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    indirection: {
      type: "List"
    },
    val: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  MultiAssignRef: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    source: {
      type: "Node"
    },
    colno: {
      type: "int"
    },
    ncolumns: {
      type: "int"
    }
  },
  SortBy: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    node: {
      type: "Node"
    },
    sortby_dir: {
      type: "SortByDir",
      "enum": true
    },
    sortby_nulls: {
      type: "SortByNulls",
      "enum": true
    },
    useOp: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  WindowDef: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    refname: {
      type: "char"
    },
    partitionClause: {
      type: "List"
    },
    orderClause: {
      type: "List"
    },
    frameOptions: {
      type: "int"
    },
    startOffset: {
      type: "Node"
    },
    endOffset: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  RangeSubselect: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    lateral: {
      type: "bool"
    },
    subquery: {
      type: "Node"
    },
    alias: {
      type: "Alias"
    }
  },
  RangeFunction: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    lateral: {
      type: "bool"
    },
    ordinality: {
      type: "bool"
    },
    is_rowsfrom: {
      type: "bool"
    },
    functions: {
      type: "List"
    },
    alias: {
      type: "Alias"
    },
    coldeflist: {
      type: "List"
    }
  },
  RangeTableFunc: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    lateral: {
      type: "bool"
    },
    docexpr: {
      type: "Node"
    },
    rowexpr: {
      type: "Node"
    },
    namespaces: {
      type: "List"
    },
    columns: {
      type: "List"
    },
    alias: {
      type: "Alias"
    },
    location: {
      type: "int"
    }
  },
  RangeTableFuncCol: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    colname: {
      type: "char"
    },
    typeName: {
      type: "TypeName",
      nested: true
    },
    for_ordinality: {
      type: "bool"
    },
    is_not_null: {
      type: "bool"
    },
    colexpr: {
      type: "Node"
    },
    coldefexpr: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  RangeTableSample: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "Node"
    },
    method: {
      type: "List"
    },
    args: {
      type: "List"
    },
    repeatable: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  ColumnDef: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    colname: {
      type: "char"
    },
    typeName: {
      type: "TypeName",
      nested: true
    },
    inhcount: {
      type: "int"
    },
    is_local: {
      type: "bool"
    },
    is_not_null: {
      type: "bool"
    },
    is_from_type: {
      type: "bool"
    },
    storage: {
      type: "char"
    },
    raw_default: {
      type: "Node"
    },
    cooked_default: {
      type: "Node"
    },
    identity: {
      type: "char"
    },
    identitySequence: {
      type: "RangeVar"
    },
    generated: {
      type: "char"
    },
    collClause: {
      type: "CollateClause",
      nested: true
    },
    collOid: {
      type: "Oid"
    },
    constraints: {
      type: "List"
    },
    fdwoptions: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  TableLikeClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    options: {
      type: "bits32"
    }
  },
  IndexElem: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    expr: {
      type: "Node"
    },
    indexcolname: {
      type: "char"
    },
    collation: {
      type: "List"
    },
    opclass: {
      type: "List"
    },
    opclassopts: {
      type: "List"
    },
    ordering: {
      type: "SortByDir",
      "enum": true
    },
    nulls_ordering: {
      type: "SortByNulls",
      "enum": true
    }
  },
  DefElem: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    defnamespace: {
      type: "char"
    },
    defname: {
      type: "char"
    },
    arg: {
      type: "Node"
    },
    defaction: {
      type: "DefElemAction",
      "enum": true
    },
    location: {
      type: "int"
    }
  },
  LockingClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    lockedRels: {
      type: "List"
    },
    strength: {
      type: "LockClauseStrength",
      "enum": true
    },
    waitPolicy: {
      type: "LockWaitPolicy",
      "enum": true
    }
  },
  XmlSerialize: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    xmloption: {
      type: "XmlOptionType",
      "enum": true
    },
    expr: {
      type: "Node"
    },
    typeName: {
      type: "TypeName",
      nested: true
    },
    location: {
      type: "int"
    }
  },
  PartitionElem: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    expr: {
      type: "Node"
    },
    collation: {
      type: "List"
    },
    opclass: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  PartitionSpec: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    strategy: {
      type: "char"
    },
    partParams: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  PartitionBoundSpec: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    strategy: {
      type: "char"
    },
    is_default: {
      type: "bool"
    },
    modulus: {
      type: "int"
    },
    remainder: {
      type: "int"
    },
    listdatums: {
      type: "List"
    },
    lowerdatums: {
      type: "List"
    },
    upperdatums: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  PartitionRangeDatum: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "PartitionRangeDatumKind",
      "enum": true
    },
    value: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  PartitionCmd: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "RangeVar"
    },
    bound: {
      type: "PartitionBoundSpec",
      nested: true
    }
  },
  RangeTblEntry: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    rtekind: {
      type: "RTEKind",
      "enum": true
    },
    relid: {
      type: "Oid"
    },
    relkind: {
      type: "char"
    },
    rellockmode: {
      type: "int"
    },
    tablesample: {
      type: "TableSampleClause",
      nested: true
    },
    subquery: {
      type: "Query",
      nested: true
    },
    security_barrier: {
      type: "bool"
    },
    jointype: {
      type: "JoinType",
      "enum": true
    },
    joinmergedcols: {
      type: "int"
    },
    joinaliasvars: {
      type: "List"
    },
    joinleftcols: {
      type: "List"
    },
    joinrightcols: {
      type: "List"
    },
    functions: {
      type: "List"
    },
    funcordinality: {
      type: "bool"
    },
    tablefunc: {
      type: "TableFunc"
    },
    values_lists: {
      type: "List"
    },
    ctename: {
      type: "char"
    },
    ctelevelsup: {
      type: "Index"
    },
    self_reference: {
      type: "bool"
    },
    coltypes: {
      type: "List"
    },
    coltypmods: {
      type: "List"
    },
    colcollations: {
      type: "List"
    },
    enrname: {
      type: "char"
    },
    enrtuples: {
      type: "double"
    },
    alias: {
      type: "Alias"
    },
    eref: {
      type: "Alias"
    },
    lateral: {
      type: "bool"
    },
    inh: {
      type: "bool"
    },
    inFromCl: {
      type: "bool"
    },
    requiredPerms: {
      type: "AclMode"
    },
    checkAsUser: {
      type: "Oid"
    },
    selectedCols: {
      type: "Bitmapset"
    },
    insertedCols: {
      type: "Bitmapset"
    },
    updatedCols: {
      type: "Bitmapset"
    },
    extraUpdatedCols: {
      type: "Bitmapset"
    },
    securityQuals: {
      type: "List"
    }
  },
  RangeTblFunction: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    funcexpr: {
      type: "Node"
    },
    funccolcount: {
      type: "int"
    },
    funccolnames: {
      type: "List"
    },
    funccoltypes: {
      type: "List"
    },
    funccoltypmods: {
      type: "List"
    },
    funccolcollations: {
      type: "List"
    },
    funcparams: {
      type: "Bitmapset"
    }
  },
  TableSampleClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    tsmhandler: {
      type: "Oid"
    },
    args: {
      type: "List"
    },
    repeatable: {
      type: "Expr"
    }
  },
  WithCheckOption: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "WCOKind",
      "enum": true
    },
    relname: {
      type: "char"
    },
    polname: {
      type: "char"
    },
    qual: {
      type: "Node"
    },
    cascaded: {
      type: "bool"
    }
  },
  SortGroupClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    tleSortGroupRef: {
      type: "Index"
    },
    eqop: {
      type: "Oid"
    },
    sortop: {
      type: "Oid"
    },
    nulls_first: {
      type: "bool"
    },
    hashable: {
      type: "bool"
    }
  },
  GroupingSet: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "GroupingSetKind",
      "enum": true
    },
    content: {
      type: "List"
    },
    location: {
      type: "int"
    }
  },
  WindowClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    refname: {
      type: "char"
    },
    partitionClause: {
      type: "List"
    },
    orderClause: {
      type: "List"
    },
    frameOptions: {
      type: "int"
    },
    startOffset: {
      type: "Node"
    },
    endOffset: {
      type: "Node"
    },
    startInRangeFunc: {
      type: "Oid"
    },
    endInRangeFunc: {
      type: "Oid"
    },
    inRangeColl: {
      type: "Oid"
    },
    inRangeAsc: {
      type: "bool"
    },
    inRangeNullsFirst: {
      type: "bool"
    },
    winref: {
      type: "Index"
    },
    copiedOrder: {
      type: "bool"
    }
  },
  RowMarkClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    rti: {
      type: "Index"
    },
    strength: {
      type: "LockClauseStrength",
      "enum": true
    },
    waitPolicy: {
      type: "LockWaitPolicy",
      "enum": true
    },
    pushedDown: {
      type: "bool"
    }
  },
  WithClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    ctes: {
      type: "List"
    },
    recursive: {
      type: "bool"
    },
    location: {
      type: "int"
    }
  },
  InferClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    indexElems: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    },
    conname: {
      type: "char"
    },
    location: {
      type: "int"
    }
  },
  OnConflictClause: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    action: {
      type: "OnConflictAction",
      "enum": true
    },
    infer: {
      type: "InferClause",
      nested: true
    },
    targetList: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    },
    location: {
      type: "int"
    }
  },
  CommonTableExpr: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    ctename: {
      type: "char"
    },
    aliascolnames: {
      type: "List"
    },
    ctematerialized: {
      type: "CTEMaterialize",
      "enum": true
    },
    ctequery: {
      type: "Node"
    },
    location: {
      type: "int"
    },
    cterecursive: {
      type: "bool"
    },
    cterefcount: {
      type: "int"
    },
    ctecolnames: {
      type: "List"
    },
    ctecoltypes: {
      type: "List"
    },
    ctecoltypmods: {
      type: "List"
    },
    ctecolcollations: {
      type: "List"
    }
  },
  TriggerTransition: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    isNew: {
      type: "bool"
    },
    isTable: {
      type: "bool"
    }
  },
  RawStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    stmt: {
      type: "Node"
    },
    stmt_location: {
      type: "int"
    },
    stmt_len: {
      type: "int"
    }
  },
  InsertStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    cols: {
      type: "List"
    },
    selectStmt: {
      type: "Node"
    },
    onConflictClause: {
      type: "OnConflictClause",
      nested: true
    },
    returningList: {
      type: "List"
    },
    withClause: {
      type: "WithClause",
      nested: true
    },
    override: {
      type: "OverridingKind",
      "enum": true
    }
  },
  DeleteStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    usingClause: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    },
    returningList: {
      type: "List"
    },
    withClause: {
      type: "WithClause",
      nested: true
    }
  },
  UpdateStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    targetList: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    },
    fromClause: {
      type: "List"
    },
    returningList: {
      type: "List"
    },
    withClause: {
      type: "WithClause",
      nested: true
    }
  },
  SelectStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    distinctClause: {
      type: "List"
    },
    intoClause: {
      type: "IntoClause"
    },
    targetList: {
      type: "List"
    },
    fromClause: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    },
    groupClause: {
      type: "List"
    },
    havingClause: {
      type: "Node"
    },
    windowClause: {
      type: "List"
    },
    valuesLists: {
      type: "List"
    },
    sortClause: {
      type: "List"
    },
    limitOffset: {
      type: "Node"
    },
    limitCount: {
      type: "Node"
    },
    limitOption: {
      type: "LimitOption",
      "enum": true
    },
    lockingClause: {
      type: "List"
    },
    withClause: {
      type: "WithClause",
      nested: true
    },
    op: {
      type: "SetOperation",
      "enum": true
    },
    all: {
      type: "bool"
    },
    larg: {
      type: "SelectStmt",
      nested: true
    },
    rarg: {
      type: "SelectStmt",
      nested: true
    }
  },
  SetOperationStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    op: {
      type: "SetOperation",
      "enum": true
    },
    all: {
      type: "bool"
    },
    larg: {
      type: "Node"
    },
    rarg: {
      type: "Node"
    },
    colTypes: {
      type: "List"
    },
    colTypmods: {
      type: "List"
    },
    colCollations: {
      type: "List"
    },
    groupClauses: {
      type: "List"
    }
  },
  CreateSchemaStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    schemaname: {
      type: "char"
    },
    authrole: {
      type: "RoleSpec",
      nested: true
    },
    schemaElts: {
      type: "List"
    },
    if_not_exists: {
      type: "bool"
    }
  },
  AlterTableStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    cmds: {
      type: "List"
    },
    relkind: {
      type: "ObjectType",
      "enum": true
    },
    missing_ok: {
      type: "bool"
    }
  },
  ReplicaIdentityStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    identity_type: {
      type: "char"
    },
    name: {
      type: "char"
    }
  },
  AlterTableCmd: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    subtype: {
      type: "AlterTableType",
      "enum": true
    },
    name: {
      type: "char"
    },
    num: {
      type: "int16"
    },
    newowner: {
      type: "RoleSpec",
      nested: true
    },
    def: {
      type: "Node"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    },
    missing_ok: {
      type: "bool"
    }
  },
  AlterCollationStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    collname: {
      type: "List"
    }
  },
  AlterDomainStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    subtype: {
      type: "char"
    },
    typeName: {
      type: "List"
    },
    name: {
      type: "char"
    },
    def: {
      type: "Node"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    },
    missing_ok: {
      type: "bool"
    }
  },
  GrantStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    is_grant: {
      type: "bool"
    },
    targtype: {
      type: "GrantTargetType",
      "enum": true
    },
    objtype: {
      type: "ObjectType",
      "enum": true
    },
    objects: {
      type: "List"
    },
    privileges: {
      type: "List"
    },
    grantees: {
      type: "List"
    },
    grant_option: {
      type: "bool"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    }
  },
  ObjectWithArgs: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objname: {
      type: "List"
    },
    objargs: {
      type: "List"
    },
    args_unspecified: {
      type: "bool"
    }
  },
  AccessPriv: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    priv_name: {
      type: "char"
    },
    cols: {
      type: "List"
    }
  },
  GrantRoleStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    granted_roles: {
      type: "List"
    },
    grantee_roles: {
      type: "List"
    },
    is_grant: {
      type: "bool"
    },
    admin_opt: {
      type: "bool"
    },
    grantor: {
      type: "RoleSpec",
      nested: true
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    }
  },
  AlterDefaultPrivilegesStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    options: {
      type: "List"
    },
    action: {
      type: "GrantStmt",
      nested: true
    }
  },
  CopyStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    query: {
      type: "Node"
    },
    attlist: {
      type: "List"
    },
    is_from: {
      type: "bool"
    },
    is_program: {
      type: "bool"
    },
    filename: {
      type: "char"
    },
    options: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    }
  },
  VariableSetStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "VariableSetKind",
      "enum": true
    },
    name: {
      type: "char"
    },
    args: {
      type: "List"
    },
    is_local: {
      type: "bool"
    }
  },
  VariableShowStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    }
  },
  CreateStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    tableElts: {
      type: "List"
    },
    inhRelations: {
      type: "List"
    },
    partbound: {
      type: "PartitionBoundSpec",
      nested: true
    },
    partspec: {
      type: "PartitionSpec",
      nested: true
    },
    ofTypename: {
      type: "TypeName",
      nested: true
    },
    constraints: {
      type: "List"
    },
    options: {
      type: "List"
    },
    oncommit: {
      type: "OnCommitAction",
      "enum": true
    },
    tablespacename: {
      type: "char"
    },
    accessMethod: {
      type: "char"
    },
    if_not_exists: {
      type: "bool"
    }
  },
  Constraint: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    contype: {
      type: "ConstrType",
      "enum": true
    },
    conname: {
      type: "char"
    },
    deferrable: {
      type: "bool"
    },
    initdeferred: {
      type: "bool"
    },
    location: {
      type: "int"
    },
    is_no_inherit: {
      type: "bool"
    },
    raw_expr: {
      type: "Node"
    },
    cooked_expr: {
      type: "char"
    },
    generated_when: {
      type: "char"
    },
    keys: {
      type: "List"
    },
    including: {
      type: "List"
    },
    exclusions: {
      type: "List"
    },
    options: {
      type: "List"
    },
    indexname: {
      type: "char"
    },
    indexspace: {
      type: "char"
    },
    reset_default_tblspc: {
      type: "bool"
    },
    access_method: {
      type: "char"
    },
    where_clause: {
      type: "Node"
    },
    pktable: {
      type: "RangeVar"
    },
    fk_attrs: {
      type: "List"
    },
    pk_attrs: {
      type: "List"
    },
    fk_matchtype: {
      type: "char"
    },
    fk_upd_action: {
      type: "char"
    },
    fk_del_action: {
      type: "char"
    },
    old_conpfeqop: {
      type: "List"
    },
    old_pktable_oid: {
      type: "Oid"
    },
    skip_validation: {
      type: "bool"
    },
    initially_valid: {
      type: "bool"
    }
  },
  CreateTableSpaceStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    tablespacename: {
      type: "char"
    },
    owner: {
      type: "RoleSpec",
      nested: true
    },
    location: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  DropTableSpaceStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    tablespacename: {
      type: "char"
    },
    missing_ok: {
      type: "bool"
    }
  },
  AlterTableSpaceOptionsStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    tablespacename: {
      type: "char"
    },
    options: {
      type: "List"
    },
    isReset: {
      type: "bool"
    }
  },
  AlterTableMoveAllStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    orig_tablespacename: {
      type: "char"
    },
    objtype: {
      type: "ObjectType",
      "enum": true
    },
    roles: {
      type: "List"
    },
    new_tablespacename: {
      type: "char"
    },
    nowait: {
      type: "bool"
    }
  },
  CreateExtensionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    extname: {
      type: "char"
    },
    if_not_exists: {
      type: "bool"
    },
    options: {
      type: "List"
    }
  },
  AlterExtensionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    extname: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  AlterExtensionContentsStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    extname: {
      type: "char"
    },
    action: {
      type: "int"
    },
    objtype: {
      type: "ObjectType",
      "enum": true
    },
    object: {
      type: "Node"
    }
  },
  CreateFdwStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    fdwname: {
      type: "char"
    },
    func_options: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  AlterFdwStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    fdwname: {
      type: "char"
    },
    func_options: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  CreateForeignServerStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    servername: {
      type: "char"
    },
    servertype: {
      type: "char"
    },
    version: {
      type: "char"
    },
    fdwname: {
      type: "char"
    },
    if_not_exists: {
      type: "bool"
    },
    options: {
      type: "List"
    }
  },
  AlterForeignServerStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    servername: {
      type: "char"
    },
    version: {
      type: "char"
    },
    options: {
      type: "List"
    },
    has_version: {
      type: "bool"
    }
  },
  CreateForeignTableStmt: {
    base: {
      type: "CreateStmt",
      nested: true
    },
    servername: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  CreateUserMappingStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    user: {
      type: "RoleSpec",
      nested: true
    },
    servername: {
      type: "char"
    },
    if_not_exists: {
      type: "bool"
    },
    options: {
      type: "List"
    }
  },
  AlterUserMappingStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    user: {
      type: "RoleSpec",
      nested: true
    },
    servername: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  DropUserMappingStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    user: {
      type: "RoleSpec",
      nested: true
    },
    servername: {
      type: "char"
    },
    missing_ok: {
      type: "bool"
    }
  },
  ImportForeignSchemaStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    server_name: {
      type: "char"
    },
    remote_schema: {
      type: "char"
    },
    local_schema: {
      type: "char"
    },
    list_type: {
      type: "ImportForeignSchemaType",
      "enum": true
    },
    table_list: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  CreatePolicyStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    policy_name: {
      type: "char"
    },
    table: {
      type: "RangeVar"
    },
    cmd_name: {
      type: "char"
    },
    permissive: {
      type: "bool"
    },
    roles: {
      type: "List"
    },
    qual: {
      type: "Node"
    },
    with_check: {
      type: "Node"
    }
  },
  AlterPolicyStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    policy_name: {
      type: "char"
    },
    table: {
      type: "RangeVar"
    },
    roles: {
      type: "List"
    },
    qual: {
      type: "Node"
    },
    with_check: {
      type: "Node"
    }
  },
  CreateAmStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    amname: {
      type: "char"
    },
    handler_name: {
      type: "List"
    },
    amtype: {
      type: "char"
    }
  },
  CreateTrigStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    trigname: {
      type: "char"
    },
    relation: {
      type: "RangeVar"
    },
    funcname: {
      type: "List"
    },
    args: {
      type: "List"
    },
    row: {
      type: "bool"
    },
    timing: {
      type: "int16"
    },
    events: {
      type: "int16"
    },
    columns: {
      type: "List"
    },
    whenClause: {
      type: "Node"
    },
    isconstraint: {
      type: "bool"
    },
    transitionRels: {
      type: "List"
    },
    deferrable: {
      type: "bool"
    },
    initdeferred: {
      type: "bool"
    },
    constrrel: {
      type: "RangeVar"
    }
  },
  CreateEventTrigStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    trigname: {
      type: "char"
    },
    eventname: {
      type: "char"
    },
    whenclause: {
      type: "List"
    },
    funcname: {
      type: "List"
    }
  },
  AlterEventTrigStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    trigname: {
      type: "char"
    },
    tgenabled: {
      type: "char"
    }
  },
  CreatePLangStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    replace: {
      type: "bool"
    },
    plname: {
      type: "char"
    },
    plhandler: {
      type: "List"
    },
    plinline: {
      type: "List"
    },
    plvalidator: {
      type: "List"
    },
    pltrusted: {
      type: "bool"
    }
  },
  CreateRoleStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    stmt_type: {
      type: "RoleStmtType",
      "enum": true
    },
    role: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  AlterRoleStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    role: {
      type: "RoleSpec",
      nested: true
    },
    options: {
      type: "List"
    },
    action: {
      type: "int"
    }
  },
  AlterRoleSetStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    role: {
      type: "RoleSpec",
      nested: true
    },
    database: {
      type: "char"
    },
    setstmt: {
      type: "VariableSetStmt",
      nested: true
    }
  },
  DropRoleStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    roles: {
      type: "List"
    },
    missing_ok: {
      type: "bool"
    }
  },
  CreateSeqStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    sequence: {
      type: "RangeVar"
    },
    options: {
      type: "List"
    },
    ownerId: {
      type: "Oid"
    },
    for_identity: {
      type: "bool"
    },
    if_not_exists: {
      type: "bool"
    }
  },
  AlterSeqStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    sequence: {
      type: "RangeVar"
    },
    options: {
      type: "List"
    },
    for_identity: {
      type: "bool"
    },
    missing_ok: {
      type: "bool"
    }
  },
  DefineStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "ObjectType",
      "enum": true
    },
    oldstyle: {
      type: "bool"
    },
    defnames: {
      type: "List"
    },
    args: {
      type: "List"
    },
    definition: {
      type: "List"
    },
    if_not_exists: {
      type: "bool"
    },
    replace: {
      type: "bool"
    }
  },
  CreateDomainStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    domainname: {
      type: "List"
    },
    typeName: {
      type: "TypeName",
      nested: true
    },
    collClause: {
      type: "CollateClause",
      nested: true
    },
    constraints: {
      type: "List"
    }
  },
  CreateOpClassStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    opclassname: {
      type: "List"
    },
    opfamilyname: {
      type: "List"
    },
    amname: {
      type: "char"
    },
    datatype: {
      type: "TypeName",
      nested: true
    },
    items: {
      type: "List"
    },
    isDefault: {
      type: "bool"
    }
  },
  CreateOpClassItem: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    itemtype: {
      type: "int"
    },
    name: {
      type: "ObjectWithArgs",
      nested: true
    },
    number: {
      type: "int"
    },
    order_family: {
      type: "List"
    },
    class_args: {
      type: "List"
    },
    storedtype: {
      type: "TypeName",
      nested: true
    }
  },
  CreateOpFamilyStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    opfamilyname: {
      type: "List"
    },
    amname: {
      type: "char"
    }
  },
  AlterOpFamilyStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    opfamilyname: {
      type: "List"
    },
    amname: {
      type: "char"
    },
    isDrop: {
      type: "bool"
    },
    items: {
      type: "List"
    }
  },
  DropStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objects: {
      type: "List"
    },
    removeType: {
      type: "ObjectType",
      "enum": true
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    },
    missing_ok: {
      type: "bool"
    },
    concurrent: {
      type: "bool"
    }
  },
  TruncateStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relations: {
      type: "List"
    },
    restart_seqs: {
      type: "bool"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    }
  },
  CommentStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objtype: {
      type: "ObjectType",
      "enum": true
    },
    object: {
      type: "Node"
    },
    comment: {
      type: "char"
    }
  },
  SecLabelStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objtype: {
      type: "ObjectType",
      "enum": true
    },
    object: {
      type: "Node"
    },
    provider: {
      type: "char"
    },
    label: {
      type: "char"
    }
  },
  DeclareCursorStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    portalname: {
      type: "char"
    },
    options: {
      type: "int"
    },
    query: {
      type: "Node"
    }
  },
  ClosePortalStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    portalname: {
      type: "char"
    }
  },
  FetchStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    direction: {
      type: "FetchDirection",
      "enum": true
    },
    howMany: {
      type: "long"
    },
    portalname: {
      type: "char"
    },
    ismove: {
      type: "bool"
    }
  },
  IndexStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    idxname: {
      type: "char"
    },
    relation: {
      type: "RangeVar"
    },
    accessMethod: {
      type: "char"
    },
    tableSpace: {
      type: "char"
    },
    indexParams: {
      type: "List"
    },
    indexIncludingParams: {
      type: "List"
    },
    options: {
      type: "List"
    },
    whereClause: {
      type: "Node"
    },
    excludeOpNames: {
      type: "List"
    },
    idxcomment: {
      type: "char"
    },
    indexOid: {
      type: "Oid"
    },
    oldNode: {
      type: "Oid"
    },
    oldCreateSubid: {
      type: "SubTransactionId"
    },
    oldFirstRelfilenodeSubid: {
      type: "SubTransactionId"
    },
    unique: {
      type: "bool"
    },
    primary: {
      type: "bool"
    },
    isconstraint: {
      type: "bool"
    },
    deferrable: {
      type: "bool"
    },
    initdeferred: {
      type: "bool"
    },
    transformed: {
      type: "bool"
    },
    concurrent: {
      type: "bool"
    },
    if_not_exists: {
      type: "bool"
    },
    reset_default_tblspc: {
      type: "bool"
    }
  },
  CreateStatsStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    defnames: {
      type: "List"
    },
    stat_types: {
      type: "List"
    },
    exprs: {
      type: "List"
    },
    relations: {
      type: "List"
    },
    stxcomment: {
      type: "char"
    },
    if_not_exists: {
      type: "bool"
    }
  },
  AlterStatsStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    defnames: {
      type: "List"
    },
    stxstattarget: {
      type: "int"
    },
    missing_ok: {
      type: "bool"
    }
  },
  CreateFunctionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    is_procedure: {
      type: "bool"
    },
    replace: {
      type: "bool"
    },
    funcname: {
      type: "List"
    },
    parameters: {
      type: "List"
    },
    returnType: {
      type: "TypeName",
      nested: true
    },
    options: {
      type: "List"
    }
  },
  FunctionParameter: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    argType: {
      type: "TypeName",
      nested: true
    },
    mode: {
      type: "FunctionParameterMode",
      "enum": true
    },
    defexpr: {
      type: "Node"
    }
  },
  AlterFunctionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objtype: {
      type: "ObjectType",
      "enum": true
    },
    func: {
      type: "ObjectWithArgs",
      nested: true
    },
    actions: {
      type: "List"
    }
  },
  DoStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    args: {
      type: "List"
    }
  },
  InlineCodeBlock: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    source_text: {
      type: "char"
    },
    langOid: {
      type: "Oid"
    },
    langIsTrusted: {
      type: "bool"
    },
    atomic: {
      type: "bool"
    }
  },
  CallStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    funccall: {
      type: "FuncCall",
      nested: true
    },
    funcexpr: {
      type: "FuncExpr"
    }
  },
  CallContext: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    atomic: {
      type: "bool"
    }
  },
  RenameStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    renameType: {
      type: "ObjectType",
      "enum": true
    },
    relationType: {
      type: "ObjectType",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    object: {
      type: "Node"
    },
    subname: {
      type: "char"
    },
    newname: {
      type: "char"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    },
    missing_ok: {
      type: "bool"
    }
  },
  AlterObjectDependsStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objectType: {
      type: "ObjectType",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    object: {
      type: "Node"
    },
    extname: {
      type: "Value"
    },
    remove: {
      type: "bool"
    }
  },
  AlterObjectSchemaStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objectType: {
      type: "ObjectType",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    object: {
      type: "Node"
    },
    newschema: {
      type: "char"
    },
    missing_ok: {
      type: "bool"
    }
  },
  AlterOwnerStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    objectType: {
      type: "ObjectType",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    object: {
      type: "Node"
    },
    newowner: {
      type: "RoleSpec",
      nested: true
    }
  },
  AlterOperatorStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    opername: {
      type: "ObjectWithArgs",
      nested: true
    },
    options: {
      type: "List"
    }
  },
  AlterTypeStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    typeName: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  RuleStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    rulename: {
      type: "char"
    },
    whereClause: {
      type: "Node"
    },
    event: {
      type: "CmdType",
      "enum": true
    },
    instead: {
      type: "bool"
    },
    actions: {
      type: "List"
    },
    replace: {
      type: "bool"
    }
  },
  NotifyStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    conditionname: {
      type: "char"
    },
    payload: {
      type: "char"
    }
  },
  ListenStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    conditionname: {
      type: "char"
    }
  },
  UnlistenStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    conditionname: {
      type: "char"
    }
  },
  TransactionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "TransactionStmtKind",
      "enum": true
    },
    options: {
      type: "List"
    },
    savepoint_name: {
      type: "char"
    },
    gid: {
      type: "char"
    },
    chain: {
      type: "bool"
    }
  },
  CompositeTypeStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    typevar: {
      type: "RangeVar"
    },
    coldeflist: {
      type: "List"
    }
  },
  CreateEnumStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    typeName: {
      type: "List"
    },
    vals: {
      type: "List"
    }
  },
  CreateRangeStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    typeName: {
      type: "List"
    },
    params: {
      type: "List"
    }
  },
  AlterEnumStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    typeName: {
      type: "List"
    },
    oldVal: {
      type: "char"
    },
    newVal: {
      type: "char"
    },
    newValNeighbor: {
      type: "char"
    },
    newValIsAfter: {
      type: "bool"
    },
    skipIfNewValExists: {
      type: "bool"
    }
  },
  ViewStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    view: {
      type: "RangeVar"
    },
    aliases: {
      type: "List"
    },
    query: {
      type: "Node"
    },
    replace: {
      type: "bool"
    },
    options: {
      type: "List"
    },
    withCheckOption: {
      type: "ViewCheckOption",
      "enum": true
    }
  },
  LoadStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    filename: {
      type: "char"
    }
  },
  CreatedbStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    dbname: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  AlterDatabaseStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    dbname: {
      type: "char"
    },
    options: {
      type: "List"
    }
  },
  AlterDatabaseSetStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    dbname: {
      type: "char"
    },
    setstmt: {
      type: "VariableSetStmt",
      nested: true
    }
  },
  DropdbStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    dbname: {
      type: "char"
    },
    missing_ok: {
      type: "bool"
    },
    options: {
      type: "List"
    }
  },
  AlterSystemStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    setstmt: {
      type: "VariableSetStmt",
      nested: true
    }
  },
  ClusterStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    indexname: {
      type: "char"
    },
    options: {
      type: "int"
    }
  },
  VacuumStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    options: {
      type: "List"
    },
    rels: {
      type: "List"
    },
    is_vacuumcmd: {
      type: "bool"
    }
  },
  VacuumRelation: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    oid: {
      type: "Oid"
    },
    va_cols: {
      type: "List"
    }
  },
  ExplainStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    query: {
      type: "Node"
    },
    options: {
      type: "List"
    }
  },
  CreateTableAsStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    query: {
      type: "Node"
    },
    into: {
      type: "IntoClause"
    },
    relkind: {
      type: "ObjectType",
      "enum": true
    },
    is_select_into: {
      type: "bool"
    },
    if_not_exists: {
      type: "bool"
    }
  },
  RefreshMatViewStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    concurrent: {
      type: "bool"
    },
    skipData: {
      type: "bool"
    },
    relation: {
      type: "RangeVar"
    }
  },
  CheckPointStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    }
  },
  DiscardStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    target: {
      type: "DiscardMode",
      "enum": true
    }
  },
  LockStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    relations: {
      type: "List"
    },
    mode: {
      type: "int"
    },
    nowait: {
      type: "bool"
    }
  },
  ConstraintsSetStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    constraints: {
      type: "List"
    },
    deferred: {
      type: "bool"
    }
  },
  ReindexStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "ReindexObjectType",
      "enum": true
    },
    relation: {
      type: "RangeVar"
    },
    name: {
      type: "char"
    },
    options: {
      type: "int"
    },
    concurrent: {
      type: "bool"
    }
  },
  CreateConversionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    conversion_name: {
      type: "List"
    },
    for_encoding_name: {
      type: "char"
    },
    to_encoding_name: {
      type: "char"
    },
    func_name: {
      type: "List"
    },
    def: {
      type: "bool"
    }
  },
  CreateCastStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    sourcetype: {
      type: "TypeName",
      nested: true
    },
    targettype: {
      type: "TypeName",
      nested: true
    },
    func: {
      type: "ObjectWithArgs",
      nested: true
    },
    context: {
      type: "CoercionContext",
      "enum": true
    },
    inout: {
      type: "bool"
    }
  },
  CreateTransformStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    replace: {
      type: "bool"
    },
    type_name: {
      type: "TypeName",
      nested: true
    },
    lang: {
      type: "char"
    },
    fromsql: {
      type: "ObjectWithArgs",
      nested: true
    },
    tosql: {
      type: "ObjectWithArgs",
      nested: true
    }
  },
  PrepareStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    argtypes: {
      type: "List"
    },
    query: {
      type: "Node"
    }
  },
  ExecuteStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    },
    params: {
      type: "List"
    }
  },
  DeallocateStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    name: {
      type: "char"
    }
  },
  DropOwnedStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    roles: {
      type: "List"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    }
  },
  ReassignOwnedStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    roles: {
      type: "List"
    },
    newrole: {
      type: "RoleSpec",
      nested: true
    }
  },
  AlterTSDictionaryStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    dictname: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  AlterTSConfigurationStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "AlterTSConfigType",
      "enum": true
    },
    cfgname: {
      type: "List"
    },
    tokentype: {
      type: "List"
    },
    dicts: {
      type: "List"
    },
    override: {
      type: "bool"
    },
    replace: {
      type: "bool"
    },
    missing_ok: {
      type: "bool"
    }
  },
  CreatePublicationStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    pubname: {
      type: "char"
    },
    options: {
      type: "List"
    },
    tables: {
      type: "List"
    },
    for_all_tables: {
      type: "bool"
    }
  },
  AlterPublicationStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    pubname: {
      type: "char"
    },
    options: {
      type: "List"
    },
    tables: {
      type: "List"
    },
    for_all_tables: {
      type: "bool"
    },
    tableAction: {
      type: "DefElemAction",
      "enum": true
    }
  },
  CreateSubscriptionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    subname: {
      type: "char"
    },
    conninfo: {
      type: "char"
    },
    publication: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  AlterSubscriptionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    kind: {
      type: "AlterSubscriptionType",
      "enum": true
    },
    subname: {
      type: "char"
    },
    conninfo: {
      type: "char"
    },
    publication: {
      type: "List"
    },
    options: {
      type: "List"
    }
  },
  DropSubscriptionStmt: {
    type: {
      type: "NodeTag",
      "enum": true
    },
    subname: {
      type: "char"
    },
    missing_ok: {
      type: "bool"
    },
    behavior: {
      type: "DropBehavior",
      "enum": true
    }
  },
  VacAttrStats: {
    attr: {
      type: "Form_pg_attribute"
    },
    attrtypid: {
      type: "Oid"
    },
    attrtypmod: {
      type: "int32"
    },
    attrtype: {
      type: "Form_pg_type"
    },
    attrcollid: {
      type: "Oid"
    },
    anl_context: {
      type: "MemoryContext"
    },
    compute_stats: {
      type: "AnalyzeAttrComputeStatsFunc"
    },
    minrows: {
      type: "int"
    },
    extra_data: {
      type: "void"
    },
    stats_valid: {
      type: "bool"
    },
    stanullfrac: {
      type: "float4"
    },
    stawidth: {
      type: "int32"
    },
    stadistinct: {
      type: "float4"
    },
    "stakind[STATISTIC_NUM_SLOTS]": {
      type: "int16"
    },
    "staop[STATISTIC_NUM_SLOTS]": {
      type: "Oid"
    },
    "stacoll[STATISTIC_NUM_SLOTS]": {
      type: "Oid"
    },
    "numnumbers[STATISTIC_NUM_SLOTS]": {
      type: "int"
    },
    "stanumbers[STATISTIC_NUM_SLOTS]": {
      type: "float4"
    },
    "numvalues[STATISTIC_NUM_SLOTS]": {
      type: "int"
    },
    "stavalues[STATISTIC_NUM_SLOTS]": {
      type: "Datum"
    },
    "statypid[STATISTIC_NUM_SLOTS]": {
      type: "Oid"
    },
    "statyplen[STATISTIC_NUM_SLOTS]": {
      type: "int16"
    },
    "statypbyval[STATISTIC_NUM_SLOTS]": {
      type: "bool"
    },
    "statypalign[STATISTIC_NUM_SLOTS]": {
      type: "char"
    },
    tupattnum: {
      type: "int"
    },
    rows: {
      type: "HeapTuple"
    },
    tupDesc: {
      type: "TupleDesc"
    },
    exprvals: {
      type: "Datum"
    },
    exprnulls: {
      type: "bool"
    },
    rowstride: {
      type: "int"
    }
  },
  VacuumParams: {
    options: {
      type: "int"
    },
    freeze_min_age: {
      type: "int"
    },
    freeze_table_age: {
      type: "int"
    },
    multixact_freeze_min_age: {
      type: "int"
    },
    multixact_freeze_table_age: {
      type: "int"
    },
    is_wraparound: {
      type: "bool"
    },
    log_min_duration: {
      type: "int"
    },
    index_cleanup: {
      type: "VacOptTernaryValue",
      "enum": true
    },
    truncate: {
      type: "VacOptTernaryValue",
      "enum": true
    },
    nworkers: {
      type: "int"
    }
  },
  Integer: {
    ival: {
      type: "long"
    }
  },
  Float: {
    str: {
      type: "char"
    }
  },
  String: {
    str: {
      type: "char"
    }
  },
  BitString: {
    str: {
      type: "char"
    }
  },
  Null: {}
};
exports.nodes = nodes;

var getEnum = function getEnum(enumType, key) {
  if (typeof key === 'number') {
    return toStr[enumType][key];
  } else {
    return toInt[enumType][key];
  }
};

exports.getEnum = getEnum;